<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lvbin&#39;s Blog</title>
  
  <subtitle>甲丐内美吕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.binlv.top/"/>
  <updated>2019-06-12T12:26:22.432Z</updated>
  <id>https://blog.binlv.top/</id>
  
  <author>
    <name>吕滨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>危机意识</title>
    <link href="https://blog.binlv.top/2019/06/01/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/20190601-%E5%8D%B1%E6%9C%BA%E6%84%8F%E8%AF%86/"/>
    <id>https://blog.binlv.top/2019/06/01/杂七杂八/20190601-危机意识/</id>
    <published>2019-06-01T07:17:23.000Z</published>
    <updated>2019-06-12T12:26:22.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>危机意识是指对紧急或困难关头的感知及应变能力。 危机来自外部与内部。 从外部环境的不可控性及内部条件的可变性，均可看到危机是客观存在的。<br>危机意识的前提是稳步发展，市场永远充满了变数，只有时刻保持居安思危的心态，正视缺点、不断创新、永不放弃，才有可能使基业长青。</p></blockquote><a id="more"></a><p>目前大环境局势不太好。</p><h1 id="什么是自由"><a href="#什么是自由" class="headerlink" title="什么是自由"></a>什么是自由</h1><p>能真正影响行动的关键，我们要的自由，最根本不是财富，财富只是工具，我们要的自由，本质是<strong>时间的自主权</strong></p><p>个人财富自由，指的是某个人再也不用为了满足生活必需而出售自己的时间了</p><p>专注成长而不是专注成功</p><p>财富自由不是终点，那只是通往终点过程中的一个里程碑而已</p><p>精明的交易员在进场交易之前，都要知道两个最基本的事——交易的底线，让自己利益最大化的交易法则（策略）</p><p>我们所说的“活在未来”，本质上来看，只能是“思维上的活在未来”。</p><h1 id="财富自由之路"><a href="#财富自由之路" class="headerlink" title="财富自由之路"></a>财富自由之路</h1><p>通往财富自由之路的路径，起码有两个：</p><ul><li><p>自己做出一个有长期成长（或长期成长率）的公司</p></li><li><p>用自己的钱投资那些已经证明自己有长期成长（或长期成长率）的公司……</p></li></ul><p>而第二条路径又分两个层次：</p><p>在那些有长期成长（或者长期成长率）的公司股票尚未公开流通之时投资（比如天使投资、风险投资、PE等等就在做这样的事情），此为所谓的“一级市场”；</p><p>在那些有长期成长（或者长期成长率）的公司股票公开流通之后投资，此为所谓的“二级市场” 。对普通人来说，这可能是更好的选择</p><h1 id="出售时间"><a href="#出售时间" class="headerlink" title="出售时间"></a>出售时间</h1><p>出售时间的三条铁律：成长才是根本关键，重视价值忽略估值，耐心比什么都重要。</p><blockquote><p>让你陷入困境的，并不是这个世界；真正让你陷入困境的，是这个世界最终并非你所想象。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;危机意识是指对紧急或困难关头的感知及应变能力。 危机来自外部与内部。 从外部环境的不可控性及内部条件的可变性，均可看到危机是客观存在的。&lt;br&gt;危机意识的前提是稳步发展，市场永远充满了变数，只有时刻保持居安思危的心态，正视缺点、不断创新、永不放弃，才有可能使基业长青。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://blog.binlv.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="胡说八道" scheme="https://blog.binlv.top/tags/%E8%83%A1%E8%AF%B4%E5%85%AB%E9%81%93/"/>
    
      <category term="面筋" scheme="https://blog.binlv.top/tags/%E9%9D%A2%E7%AD%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS函数式编程</title>
    <link href="https://blog.binlv.top/2019/05/30/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190530-JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://blog.binlv.top/2019/05/30/编程开发/20190530-JS函数式编程/</id>
    <published>2019-05-30T06:10:00.000Z</published>
    <updated>2019-06-10T08:32:55.261Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过抽象各种元操作函数提高代码可复用性</p></blockquote><p>函数式编程的目的是<strong>使用函数来抽象作用在数据之上的控制流和操作，从而在系统中消除副作用并减少对状态的改变</strong></p><a id="more"></a><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><blockquote><p>Functional Programming 都是表达式(Expression) 不会是陈述式(Statement)。<br>参考<a href="http://2ality.com/2012/09/expressions-vs-statements.html" target="_blank" rel="noopener">Expressions versus statements in JavaScript</a></p></blockquote><ul><li>表达式： <strong>运算</strong>过程，一定有返回值</li><li>陈述式：表现某个行为，如赋值。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过抽象各种元操作函数提高代码可复用性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数式编程的目的是&lt;strong&gt;使用函数来抽象作用在数据之上的控制流和操作，从而在系统中消除副作用并减少对状态的改变&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>RN Keyboard dismiss</title>
    <link href="https://blog.binlv.top/2019/04/27/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190427-RN%20Keyboard%20dismiss/"/>
    <id>https://blog.binlv.top/2019/04/27/编程开发/20190427-RN Keyboard dismiss/</id>
    <published>2019-04-27T04:10:45.000Z</published>
    <updated>2019-06-10T06:36:55.805Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司用的RN锁定0.30，很多新功能或者老bug只能手动修复，蛋疼。</p></blockquote><a id="more"></a><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>当点击TextInput键盘弹起时，如果此时后端报错，input不失焦，键盘也不隐藏，emmmmm</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blurOnSubmit</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextInput.State.blurTextInput(TextInput.State.currentlyFocusedField())</span><br></pre></td></tr></table></figure><h2 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h2><p>手动调用 <code>keyboard.dismiss()</code></p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul><li><a href="https://github.com/FaridSafi/react-native-gifted-chat/issues/405" target="_blank" rel="noopener">github-issue-Keyboard won’t dismiss when area outside of keyboard is tapped</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司用的RN锁定0.30，很多新功能或者老bug只能手动修复，蛋疼。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="React Native" scheme="https://blog.binlv.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="https://blog.binlv.top/2019/03/26/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190326-%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>https://blog.binlv.top/2019/03/26/编程开发/20190326-数组去重/</id>
    <published>2019-03-26T12:30:45.000Z</published>
    <updated>2019-06-06T09:22:31.470Z</updated>
    
    <content type="html"><![CDATA[<p>今天处理下数组的去重。</p><a id="more"></a><h1 id="基础款"><a href="#基础款" class="headerlink" title="基础款"></a>基础款</h1><p>要求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="keyword">in</span> ===&gt; list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出out ===&gt; unionList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>要求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="keyword">in</span> ===&gt; list = [&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;,&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;]</span><br><span class="line">输出out ===&gt; unionList = [&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;,&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;]</span><br></pre></td></tr></table></figure><h1 id="究极体"><a href="#究极体" class="headerlink" title="究极体"></a>究极体</h1><p>要求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">输入<span class="keyword">in</span> ===&gt; list = [</span><br><span class="line">    &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'哈'</span>,</span><br><span class="line">      batch: <span class="string">'1-1'</span>,</span><br><span class="line">      other: <span class="string">'yiyi'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'哈'</span>,</span><br><span class="line">      batch: <span class="string">'1-2'</span>,</span><br><span class="line">      other: <span class="string">'yier'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'哈'</span>,</span><br><span class="line">      batch: <span class="string">'1-1'</span>,</span><br><span class="line">      other: <span class="string">'yier'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        code: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'呵'</span>,</span><br><span class="line">      batch: <span class="string">'2-1'</span>,</span><br><span class="line">      other: <span class="string">'eryi'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">primaryKey: code + batch</span><br><span class="line"></span><br><span class="line">输出out ===&gt; unionList = [</span><br><span class="line">    &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'哈'</span>,</span><br><span class="line">      batch: <span class="string">'1-1'</span>,</span><br><span class="line">      other: <span class="string">'yiyi'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'哈'</span>,</span><br><span class="line">      batch: <span class="string">'1-2'</span>,</span><br><span class="line">      other: <span class="string">'yier'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        code: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'呵'</span>,</span><br><span class="line">      batch: <span class="string">'2-1'</span>,</span><br><span class="line">      other: <span class="string">'eryi'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天处理下数组的去重。&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React Native Keyboard Covering Inputs</title>
    <link href="https://blog.binlv.top/2019/02/28/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190228-RN%20Keyboard%20Covering%20Inputs/"/>
    <id>https://blog.binlv.top/2019/02/28/编程开发/20190228-RN Keyboard Covering Inputs/</id>
    <published>2019-02-28T02:10:45.000Z</published>
    <updated>2019-06-06T09:22:31.473Z</updated>
    
    <content type="html"><![CDATA[<p>当键盘遮挡住被输入TextInput时，尝试过几种解决思路：</p><ol><li>外侧包一层<code>ScrollView</code>，然后通过<code>ScrollView</code>的<code>scrollTo()</code>来滚到键盘上方，其中的难点在于 <strong>怎么计算需要滚动的值</strong>，原lego里的Scroll + Input有对应实现，但有bug💔</li><li>用<code>react native</code>的<code>KeyboardAvoidingView</code>组件，但在需要用<code>ScrollView</code>的地方很诡异，遂放弃</li><li>用<code>transform</code>向Y轴平移啊，还不用动<code>TextInput</code>，结合 <code>animation</code>提升用户体验，简直爽得起飞🛫️，😄<a id="more"></a></li></ol><blockquote><p>20190531更新：1. 实测IOS对动画有一定延时。。 2. 为兼容iPHONE X等全面屏，需对<code>offset</code>单独设置大些的值</p></blockquote><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardShift</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    shift: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.keyboardDidShowSub = Keyboard.addListener(<span class="string">'keyboardDidShow'</span>, <span class="keyword">this</span>.handleKeyboardDidShow);</span><br><span class="line">    <span class="keyword">this</span>.keyboardDidHideSub = Keyboard.addListener(<span class="string">'keyboardDidHide'</span>, <span class="keyword">this</span>.handleKeyboardDidHide);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.keyboardDidShowSub.remove();</span><br><span class="line">    <span class="keyword">this</span>.keyboardDidHideSub.remove();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleKeyboardDidShow = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">height</span>: windowHeight &#125; = Dimensions.get(<span class="string">'window'</span>);</span><br><span class="line">    <span class="keyword">const</span> keyboardHeight = event.endCoordinates.height;</span><br><span class="line">    <span class="keyword">const</span> currentlyFocusedField = TextInputState.currentlyFocusedField();</span><br><span class="line">    UIManager.measure(currentlyFocusedField, (originX, originY, width, height, pageX, pageY) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> fieldHeight = height;</span><br><span class="line">      <span class="keyword">const</span> fieldTop = pageY;</span><br><span class="line">      <span class="keyword">const</span> gap = (windowHeight - keyboardHeight) - (fieldTop + fieldHeight) - offset;</span><br><span class="line">      <span class="keyword">if</span> (gap &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      Animated.timing(</span><br><span class="line">        <span class="keyword">this</span>.state.shift,</span><br><span class="line">        &#123;</span><br><span class="line">          toValue: gap,</span><br><span class="line">          duration: <span class="number">300</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      ).start();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleKeyboardDidHide = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    Animated.timing(</span><br><span class="line">      <span class="keyword">this</span>.state.shift,</span><br><span class="line">      &#123;</span><br><span class="line">        toValue: <span class="number">0</span>,</span><br><span class="line">        duration: <span class="number">300</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, ...other &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> &#123; shift &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ScrollView</span><br><span class="line">        keyboardShouldPersistTaps=<span class="string">"handled"</span></span><br><span class="line">        &#123;...other&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;Animated.View style=&#123;[styles.container, &#123; <span class="attr">transform</span>: [&#123; <span class="attr">translateY</span>: shift &#125;] &#125;]&#125;&gt;</span><br><span class="line">          &#123;children&#125;</span><br><span class="line">        &lt;<span class="regexp">/Animated.View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ScrollView&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KeyboardShift.propTypes = &#123;</span><br><span class="line">  children: PropTypes.element.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul><li><a href="https://codeburst.io/react-native-keyboard-covering-inputs-72a9d3072689" target="_blank" rel="noopener">React Native Keyboard Covering Inputs – codeburst</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当键盘遮挡住被输入TextInput时，尝试过几种解决思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;外侧包一层&lt;code&gt;ScrollView&lt;/code&gt;，然后通过&lt;code&gt;ScrollView&lt;/code&gt;的&lt;code&gt;scrollTo()&lt;/code&gt;来滚到键盘上方，其中的难点在于 &lt;strong&gt;怎么计算需要滚动的值&lt;/strong&gt;，原lego里的Scroll + Input有对应实现，但有bug💔&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;react native&lt;/code&gt;的&lt;code&gt;KeyboardAvoidingView&lt;/code&gt;组件，但在需要用&lt;code&gt;ScrollView&lt;/code&gt;的地方很诡异，遂放弃&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;transform&lt;/code&gt;向Y轴平移啊，还不用动&lt;code&gt;TextInput&lt;/code&gt;，结合 &lt;code&gt;animation&lt;/code&gt;提升用户体验，简直爽得起飞🛫️，😄
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="React Native" scheme="https://blog.binlv.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>moment.js踩的周选择坑</title>
    <link href="https://blog.binlv.top/2019/02/25/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190225-moment.js%E8%B8%A9%E7%9A%84%E5%91%A8%E9%80%89%E6%8B%A9%E5%9D%91/"/>
    <id>https://blog.binlv.top/2019/02/25/编程开发/20190225-moment.js踩的周选择坑/</id>
    <published>2019-02-25T11:30:45.000Z</published>
    <updated>2019-06-06T09:22:31.469Z</updated>
    
    <content type="html"><![CDATA[<p><code>moment.js</code>是一个强大的JavaScript日期处理类库，加上antd与moment.js的强耦合，必须用。</p><p>故事的开始要从前段时间做的一个需求的其中一个功能：</p><blockquote><p>用户可选择默认周期为“下周（下周一~下周日）”，支持当前周往后再选4周（W+1 ~ W+4）<br><a id="more"></a><br>当时的实现四周日期如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setWeekList(howMuch = <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (howMuch === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> item = &#123;</span><br><span class="line">    start: moment().day(<span class="string">'Monday'</span>).add(<span class="number">7</span> * howMuch, <span class="string">'d'</span>).format(<span class="string">'YYYY-MM-DD'</span>),</span><br><span class="line">    end: moment().day(<span class="string">'Monday'</span>).add((<span class="number">7</span> * howMuch) + <span class="number">6</span>, <span class="string">'d'</span>).format(<span class="string">'YYYY-MM-DD'</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.weekList.unshift(&#123; ...item &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setWeekList(howMuch - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>正常工作日使用是没有问题的，但周日选择会出现问题：<br>我们日常认为的周起始是周一，但moment.js中默认为周日。。。导致周日时取的下周为下下周==。</p><p>正确姿势：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setWeekList(howMuch = <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (howMuch === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * WARNING:</span></span><br><span class="line"><span class="comment">   * `moment().startOf('isoWeek');` set to the first day (Monday) of this week according to ISO 8601, 12:00 am</span></span><br><span class="line"><span class="comment">   * `moment().day('Monday')` default first day --- Sunday</span></span><br><span class="line"><span class="comment">   * doc: https://momentjs.com/docs/#/manipulating/start-of/</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> item = &#123;</span><br><span class="line">    start: moment()</span><br><span class="line">            .startOf(<span class="string">'isoWeek'</span>)</span><br><span class="line">            .add(<span class="number">7</span> * howMuch, <span class="string">'d'</span>)</span><br><span class="line">            .format(<span class="string">'YYYY-MM-DD'</span>),</span><br><span class="line">    end: moment()</span><br><span class="line">          .startOf(<span class="string">'isoWeek'</span>)</span><br><span class="line">          .add((<span class="number">7</span> * howMuch) + <span class="number">6</span>, <span class="string">'d'</span>)</span><br><span class="line">          .format(<span class="string">'YYYY-MM-DD'</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.weekList.unshift(&#123; ...item &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setWeekList(howMuch - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;moment.js&lt;/code&gt;是一个强大的JavaScript日期处理类库，加上antd与moment.js的强耦合，必须用。&lt;/p&gt;
&lt;p&gt;故事的开始要从前段时间做的一个需求的其中一个功能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户可选择默认周期为“下周（下周一~下周日）”，支持当前周往后再选4周（W+1 ~ W+4）&lt;br&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-判断单调数组</title>
    <link href="https://blog.binlv.top/2019/01/07/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190107-Leetcode%E5%88%A4%E6%96%AD%E5%8D%95%E8%B0%83%E6%95%B0%E7%BB%84/"/>
    <id>https://blog.binlv.top/2019/01/07/编程开发/20190107-Leetcode判断单调数组/</id>
    <published>2019-01-07T04:26:45.000Z</published>
    <updated>2019-06-06T09:22:31.469Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了道算法题，</p><blockquote><p>判断一个数组是否为单调数组，是返回 <code>true</code>，不是返回 <code>false</code>。</p></blockquote><p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,2,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [6,5,4,4]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,2]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p><p>Example 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,4,5]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><p>Example 5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>单调即数组后一项都比前一项大，或都比前一项小<br>重点是 <strong>每一项</strong> 和 <strong>比较</strong></p><ul><li>要能遍历每一项，需要循环数组</li><li>比较，这个就有文章了</li></ul><h2 id="怎么比较"><a href="#怎么比较" class="headerlink" title="怎么比较"></a>怎么比较</h2><p>因为有两种情况</p><ul><li>要么后一项都比前一项大</li><li>要么后一项都比前一项小</li></ul><p>因此最简单的是两个if判断一下，于是就有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; list</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isMonotonic = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> incMon(list) || decMon(list)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> incMon = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isMon = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;list.length<span class="number">-1</span>; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>] &gt; <span class="number">0</span>) isMon = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isMon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decMon = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isMon = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;list.length<span class="number">-1</span>; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>] &lt; <span class="number">0</span>) isMon = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isMon;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>emmm，上面这段是有bug的，因为就算循环了，但判断条件只要有一项满足即为true，因此无法检测类似[1,3,2]这种数组，怎么办？</p><p>问题在哪呢？</p><p>上面两个incMon和decMon的前提假设是传入的数组不是单调数组，如果假设传入是单调，只要判断出有一项不符合，就返回false，那应该就不会有问题了。</p><p>于是，改为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; list</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isMonotonic = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> incMon(list) || decMon(list)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> incMon = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isMon = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;list.length<span class="number">-1</span>; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>] &lt; <span class="number">0</span>) isMon = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isMon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decMon = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isMon = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;list.length<span class="number">-1</span>; i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>] &gt; <span class="number">0</span>) isMon = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isMon;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>嗯，</p><blockquote><p>条件判断应该尽量判断特殊情况。</p></blockquote><p>再看看刚才代码，感觉两个增减判断函数里for循环功能类似，仅判断条件不一样，第六感告诉我这还有优化空间。</p><p>心中默念：</p><blockquote><p>写代码的目的是为了有一天能不写代码。</p></blockquote><p>来，继续。</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>非单调的情况是</p><ul><li>递增的出现<code>list[i]-list[i+1] &gt; 0</code></li><li>递减的出现<code>list[i]-list[i+1] &lt; 0</code></li></ul><p>然后可以有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; list</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isMonotonic = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> incFlag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> decFlag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, i&lt;list.length<span class="number">-1</span>,i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>]&gt;<span class="number">0</span>) incFlag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>]&lt;<span class="number">0</span>) decFlag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incFlag || decFlag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>嗯，看着优雅多了</p><h1 id="ShowCase"><a href="#ShowCase" class="headerlink" title="ShowCase"></a>ShowCase</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>咦，当数组只有一个数的时候必定是单调函数，就不用再费事去循环了！<br>再优化下，加个判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; list</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isMonotonic = <span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">+    <span class="keyword">if</span>(list.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> incFlag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> decFlag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, i&lt;list.length<span class="number">-1</span>,i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>]&gt;<span class="number">0</span>) incFlag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(list[i]-list[i+<span class="number">1</span>]&lt;<span class="number">0</span>) decFlag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incFlag || decFlag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，这回应该不错了。</p><h1 id="还有别的方法嘛？"><a href="#还有别的方法嘛？" class="headerlink" title="还有别的方法嘛？"></a>还有别的方法嘛？</h1><p>有的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isMonotonic = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="number">0</span>; <span class="comment">//increasing - 1; decreasing -2</span></span><br><span class="line">  <span class="keyword">if</span> (A.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (A[i] &gt; A[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (flag === <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      flag = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; A[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (flag === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      flag = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了道算法题，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断一个数组是否为单调数组，是返回 &lt;code&gt;true&lt;/code&gt;，不是返回 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example 1:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,2,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 2:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [6,5,4,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 3:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,3,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 4:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,2,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Example 5:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://blog.binlv.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>mobx源码初读笔记</title>
    <link href="https://blog.binlv.top/2019/01/02/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20190102-mobx%E6%BA%90%E7%A0%81/"/>
    <id>https://blog.binlv.top/2019/01/02/编程开发/20190102-mobx源码/</id>
    <published>2019-01-02T04:26:45.000Z</published>
    <updated>2019-06-06T09:22:31.468Z</updated>
    
    <content type="html"><![CDATA[<p>mobx 3.1.9</p><h1 id="autorun"><a href="#autorun" class="headerlink" title="autorun"></a>autorun</h1><ul><li>autorun</li><li>observable</li><li>globalstate</li><li>reaction</li></ul><p>实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bankUser = mobx.observable(&#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  income: <span class="number">3</span>,</span><br><span class="line">  debit: <span class="number">2</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mobx.autorun(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'张三的账户存款:'</span>, bankUser.income);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="可观察watcher"><a href="#可观察watcher" class="headerlink" title="可观察watcher"></a>可观察watcher</h2><p>调用 <code>mobx.observable()</code> 方法，创建了 observable 对象， 对象的所有属性都拷贝至一个克隆对象并将克隆对象设置成 可观察 — 猜测使用的是es6的proxy方法</p><p>观察员watcher有两个非常重要的行为特征：</p><ul><li>当有人请求观察员所监控的值（比如income）时，会触发 MobX 所提供的 <code>reportObserved</code> 方法；</li><li>当观察员所监控的值（比如income）发生变化时，会触发 MobX 所提供的 <code>propagateChanged</code> 方法；</li></ul><h2 id="自动执行autorun"><a href="#自动执行autorun" class="headerlink" title="自动执行autorun"></a>自动执行autorun</h2><p>含义： 响应式函数 —— 响应观察值的变化而自动执行指定的函数。</p><p>脉络</p><ol><li><p>创建 <code>Reaction</code> 类型对象，关键特征是 <strong>监督并控制任务的执行</strong></p></li><li><p>分配任务</p></li><li><p>立即执行一次autorun中的函数，通过reaction.schedule() </p></li></ol><blockquote><p><strong>reaction.schedule</strong></p><ul><li>探长入列</li><li>让队列所有探长执行 <code>runReaction</code> 方法</li></ul></blockquote><h2 id="探长是个啥玩意儿"><a href="#探长是个啥玩意儿" class="headerlink" title="探长是个啥玩意儿"></a>探长是个啥玩意儿</h2><p>主流程大致只有 4 步：</p><ul><li>开始执行（runReaction）</li><li>判断是否执行（shouldCompute）</li><li>执行任务（onInvalidate）</li><li>结束</li></ul><blockquote><p>有一个很重要的 shouldCompute 判断方法步骤，根据这个方法探长可以自行判断 是否执行任务，并非所有的任务都需要执行，这一步的作用是优化 MobX 执行效率。</p></blockquote><h3 id="开始执行（runReaction）"><a href="#开始执行（runReaction）" class="headerlink" title="开始执行（runReaction）"></a>开始执行（runReaction）</h3><p>为开始执行做准备工作<br>用 startBatch() 开头，用 endBatch() 结尾，中间隔着 onInvalidate。</p><p>startBatch() 和 endBatch() 这两个方法一定是成对出现，用于影响 globalState 的 inBatch 属性，表明开启/关闭 一层新的事务</p><h3 id="执行任务（onInvalidate）"><a href="#执行任务（onInvalidate）" class="headerlink" title="执行任务（onInvalidate）"></a>执行任务（onInvalidate）</h3><p>onInvalidate 是 Reaction 类的一个属性，且在初始化 Reaction 时传入到构造函数中的，这样做的目的是方便做扩展。</p><p>autorun 方法本质就是一种预定义好的 Reaction —— 你可以依葫芦画瓢，将自定义 onInvalidate 方法传给 Reaction 来实现自己的 计划任务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mobx 3.1.9&lt;/p&gt;
&lt;h1 id=&quot;autorun&quot;&gt;&lt;a href=&quot;#autorun&quot; class=&quot;headerlink&quot; title=&quot;autorun&quot;&gt;&lt;/a&gt;autorun&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;autorun&lt;/li&gt;
&lt;li&gt;observable&lt;/li&gt;
&lt;li&gt;globalstate&lt;/li&gt;
&lt;li&gt;reaction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bankUser = mobx.observable(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;张三&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  income: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debit: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mobx.autorun(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;张三的账户存款:&#39;&lt;/span&gt;, bankUser.income);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="Mobx" scheme="https://blog.binlv.top/tags/Mobx/"/>
    
  </entry>
  
  <entry>
    <title>keydown长按时短暂卡顿问题</title>
    <link href="https://blog.binlv.top/2018/04/16/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20180416-keydown%E9%95%BF%E6%8C%89%E6%97%B6%E7%9F%AD%E6%9A%82%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.binlv.top/2018/04/16/编程开发/20180416-keydown长按时短暂卡顿问题/</id>
    <published>2018-04-16T04:26:45.000Z</published>
    <updated>2019-06-06T09:22:31.468Z</updated>
    
    <content type="html"><![CDATA[<p><code>keydown</code> 属于键盘事件（<a href="https://www.w3.org/TR/uievents/#events-keyboardevents" target="_blank" rel="noopener">Keyboard Events</a>），当键盘按下某个按键时触发，且默认情况下，长按某按键会重复触发。但事件会判断用户是否长按还是连续按下，因此会有一定延迟（有点类似移动端适配时onclick事件会有300ms延迟）。一般情况下该延迟很难察觉，但在开发JS游戏时，发现该延迟会严重降低游戏体验，给玩家一种十分卡顿的感觉。此时就很有必要解决该问题。</p><a id="more"></a><p>不废话，先看代码逻辑：</p><p>Game 类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bindEvent();</span><br><span class="line">  <span class="keyword">this</span>.start();</span><br><span class="line">  <span class="keyword">this</span>.plane = <span class="keyword">new</span> Plane();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听事件函数</span></span><br><span class="line">Game.prototype.bindEvent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里使用JQuery方法获取DOM</span></span><br><span class="line">  $(<span class="built_in">document</span>).keydown(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span>(event.keyCode == <span class="number">37</span>) &#123;game.plane.left();&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(event.keyCode == <span class="number">39</span>) &#123;game.plane.right();&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主循环函数</span></span><br><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    game.plane.render();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Plane 类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Plane.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">game.ctx.drawImage(<span class="keyword">this</span>.plane,<span class="keyword">this</span>.x,game.canvas.height - <span class="number">124</span> - <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//飞机左移</span></span><br><span class="line">Plane.prototype.left = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x -=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.x &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//飞机右移</span></span><br><span class="line">Plane.prototype.right = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x +=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.x &gt;= game.canvas.width - <span class="number">100</span>)&#123;</span><br><span class="line"><span class="keyword">this</span>.x = game.canvas.width - <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>throttle</code> 和 <code>debounce</code> 是解决请求和响应速度不匹配问题的两个方案。二者的差异在于选择不同的策略。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.w3.org/TR/uievents/#events-keyboardevents" target="_blank" rel="noopener">W3关于keyboardevents的解释</a></li><li><a href="https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs" target="_blank" rel="noopener">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;keydown&lt;/code&gt; 属于键盘事件（&lt;a href=&quot;https://www.w3.org/TR/uievents/#events-keyboardevents&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keyboard Events&lt;/a&gt;），当键盘按下某个按键时触发，且默认情况下，长按某按键会重复触发。但事件会判断用户是否长按还是连续按下，因此会有一定延迟（有点类似移动端适配时onclick事件会有300ms延迟）。一般情况下该延迟很难察觉，但在开发JS游戏时，发现该延迟会严重降低游戏体验，给玩家一种十分卡顿的感觉。此时就很有必要解决该问题。&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="DOM" scheme="https://blog.binlv.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>从new操作符看原型与原型链</title>
    <link href="https://blog.binlv.top/2018/04/06/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20180406-%E4%BB%8Enew%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9C%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://blog.binlv.top/2018/04/06/编程开发/20180406-从new操作符看原型与原型链/</id>
    <published>2018-04-06T09:30:20.000Z</published>
    <updated>2019-06-06T09:22:31.468Z</updated>
    
    <content type="html"><![CDATA[<p>ECMA-262中，把对象定义为：”无序属性的集合，其属性可以为基本类型值、对象或者函数。”而一般我们要创建对象（更准确一点叫做创建对象实例）时，会使用 <code>new</code> 操作符。最简单的如 <code>new Object()</code> ，然后我们把创建对象实例的那个东西（也就是 <code>new</code> 操作符后面跟着的那个东西，一般都是一个函数）叫做构造函数（有人也叫做构造器）。再然后我们会把 <code>new Object()</code> 的返回值赋值给一个变量如 <code>obj</code> ，写成 <code>var obj=new Object();</code> ，而后我们就会对obj进行各种操作，但其中到底发生了什么？</p><a id="more"></a><h1 id="当-new-Foo-被执行"><a href="#当-new-Foo-被执行" class="headerlink" title="当 new Foo(...) 被执行"></a>当 <code>new Foo(...)</code> 被执行</h1><blockquote><p>引用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">MDN</a> 上关于当 <code>new Foo(...)</code> 被执行，会发生如下事情：</p><ol><li>创建一个从<code>Foo.prototype</code> 继承的新对象；</li><li>构造函数 <code>Foo</code> 使用指定的参数调用，并将<code>Foo</code> 中的 <code>this</code> 绑定到新创建的对象。<code>new Foo</code> 相当于<code>new Foo()</code>，即如果没有指定参数列表，则使用无参调用Foo；</li><li>构造函数返回的对象成为整个 <code>new</code> 表达式的结果。如果构造函数没有显式地返回一个对象，那么将使用步骤1中创建的对象。(通常构造函数不返回值，但是它们可以选择这样做，如果它们想要覆盖正常的对象创建过程。)</li></ol></blockquote><p>上面那段说白了就是：</p><ol><li>使用 <code>new</code> 操作符时，会创建一个新对象，该新对象的 <code>__proto__</code> 属性指向其构造函数的原型，即 <code>Foo.prototype</code>；</li><li>构造函数中的 <code>this</code> 会指向新对象；</li><li>执行构造函数中语句；</li><li>如果构造函数定义了返回值且返回值是对象（包括数组、函数之类的），则返回值为这些对象；如果构造函数未定义返回值（默认返回<code>Undefined</code>）或定义的返回值是基本类型（<code>Undefined</code>类型、<code>Null</code>类型、<code>Boolean</code>类型、<code>Number</code>类型、<code>String</code>类型），则返回 <code>new</code> 创建的那个新对象。</li></ol><p><strong>需注意的是：</strong>新对象的 <code>__proto__</code> 属性指向其构造函数的原型，即 <code>Foo.prototype</code>，而不是指向 <code>Foo</code> 。 <code>Foo.prototype</code> 为创建 <code>Foo</code> （一般为使用 <code>function Foo(){...}</code>）时创建的的属性，<code>prototype</code>中包括一个名为 <code>constructor</code> 的属性，该属性才是指向 <code>Foo</code>。</p><p>举例说明：</p><ul><li><p>关于第一点的例子：</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180406-%E5%8E%9F%E5%9E%8B%E7%9A%84%E4%BE%8B%E5%AD%90.png?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10" alt="new创建Foo对象举例"></p></li></ul><ul><li><p>关于第四点的例子：</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180406-new%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E4%BE%8B%E5%AD%90.png?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10" alt="new返回值的例子"></p></li></ul><h1 id="字面量定义-prototype"><a href="#字面量定义-prototype" class="headerlink" title="字面量定义 prototype"></a>字面量定义 <code>prototype</code></h1><p>还需要注意的一点为，如果通过字面量形式定义 <code>prototype</code> 时，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Person.prototype = &#123; </span><br><span class="line">  name : <span class="string">"Nicholas"</span>, </span><br><span class="line">  age : <span class="number">29</span>, </span><br><span class="line">  job: <span class="string">"Software Engineer"</span>, </span><br><span class="line">  sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name); &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时 Person.prototype 的 constructor 属性就不是指向 Person 了 而是指向默认的 Object ，因为字面量形式相当于重写 prototype，如需像关键字声明那样使 constructor 指向 Person，需在字面量中手动声明，这个要特别注意。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">Person.prototype = &#123; </span><br><span class="line">  <span class="keyword">constructor</span> : Person,</span><br><span class="line">  name : "Nicholas", </span><br><span class="line">  age : 29, </span><br><span class="line">  job: "Software Engineer", </span><br><span class="line">  sayName : function () &#123; alert(<span class="keyword">this</span>.name); &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">MDN上关于new操作符的解释</a></li><li><a href="http://www.zhangxinxu.com/wordpress/2013/07/jquery-%E5%8E%9F%E7%90%86-%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">张鑫旭关于jQuery的原理和机制的解释</a></li><li><a href="http://www.jb51.net/article/79437.htm" target="_blank" rel="noopener">极易被忽视的javascript面试题七问七答</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMA-262中，把对象定义为：”无序属性的集合，其属性可以为基本类型值、对象或者函数。”而一般我们要创建对象（更准确一点叫做创建对象实例）时，会使用 &lt;code&gt;new&lt;/code&gt; 操作符。最简单的如 &lt;code&gt;new Object()&lt;/code&gt; ，然后我们把创建对象实例的那个东西（也就是 &lt;code&gt;new&lt;/code&gt; 操作符后面跟着的那个东西，一般都是一个函数）叫做构造函数（有人也叫做构造器）。再然后我们会把 &lt;code&gt;new Object()&lt;/code&gt; 的返回值赋值给一个变量如 &lt;code&gt;obj&lt;/code&gt; ，写成 &lt;code&gt;var obj=new Object();&lt;/code&gt; ，而后我们就会对obj进行各种操作，但其中到底发生了什么？&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】MDN：transform-function</title>
    <link href="https://blog.binlv.top/2018/03/21/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20180321-MDN%EF%BC%9Atransform-function/"/>
    <id>https://blog.binlv.top/2018/03/21/编程开发/20180321-MDN：transform-function/</id>
    <published>2018-03-21T05:50:33.000Z</published>
    <updated>2019-06-06T09:22:31.467Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function" target="_blank" rel="noopener">MDN : transform-function</a></p><p><strong>transform-function</strong>用于对元素的显示做变换。通常，这种变换可以由矩阵表示，并且可以使用每个点上的矩阵乘法来确定所得到的图像。</p><p>以下为3D图像关于各种转换函数的定义。</p><a id="more"></a><h3 id="perspective"><a href="#perspective" class="headerlink" title="perspective()"></a>perspective()</h3><p> <code>perspective()</code> 这个CSS函数定义了 z=0平面与用户之间的距离，以便给三维定位元素一定透视度。当每个3D元素的z&gt;0时会显得比较大，而在z&lt;0时会显得比较小。其影响的程度由这个属性的值来决定。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">perspective</span>(<span class="selector-tag">l</span>)</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><p>l</p><p>该参数是一个 <code>length</code>， 给定从用户（显示屏）到z = 0平面的距离。 它用于将透视转换(3D)应用于元素。 如果它是0或负值，则不应用3D变换。</p></li></ul><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-rotate_19.5.png" alt="rotate()"> <code>rotate()</code> 这个CSS 函数 定义一个旋转属性，将元素在不变形的情况下旋转到不动点周围( <code>transform-origin</code>属性指定) 。 移动量由指定角度定义；如果为正值，则运动将为顺时针，如果为负值，则为逆时针 。 180°的旋转称为点反射 (<em>point reflection</em>)。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rotate</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为 <code>angle</code>， 代表旋转的角度。正角表示顺时针旋转，负角表示逆时针旋转。</p></li></ul><h3 id="rotate3d"><a href="#rotate3d" class="headerlink" title="rotate3d()"></a>rotate3d()</h3><p> <code>rotate3d()</code> 这个CSS 函数定义一个3D旋转功能，该旋转使元素能够绕固定轴移动而不变形。 其中移动量由指定角度定义；如果为正值，则运动将为顺时针，如果为负值，则为逆时针。</p><p>在三维空间中，旋转有三个自由度，各表示某条旋转轴。 旋转轴由[x，y，z]向量定义，且过原点（由 <code>transform-origin</code> CSS属性定义）。 如果向量没有标准化，即它的三个坐标的平方之和不是1，它将在内部被标准化。 不可标准化的向量，如空向量[0,0,0]，将导致旋转不被应用，但不会影响整个CSS属性。</p><p>注意：相对于平面上的旋转，三维旋转的组成通常不是可交换位置顺序的，这意味着旋转的应用顺序是至关重要的。</p><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rotate3d</span>(<span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">z</span>, <span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>x</em></p><p>该参数为”<code>number</code>“ 类型值， 描述旋转轴向量的x坐标 。</p></li><li><p><em>y</em></p><p>该参数为 “<code>number</code>“ 类型值，描述旋转轴向量的y坐标。</p></li><li><p><em>z</em></p><p>该参数为 “<code>number</code>“ 类型值，描述旋转轴向量的z坐标。</p></li><li><p><em>a</em></p><p>该参数为 “<code>angle</code>“ 代表旋转的角度 。 正角度表示顺时针旋转，负角度表示逆时针旋转 。</p></li></ul><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> <code>rotateX()</code> 这个CSS 函数定义了将元素在横坐标上旋转而不使其变形的方法。 其运动的程度由指定的角度来定义；如果是正的，则为顺时针旋转，如果是负的，则是逆时针旋转。</p><p>旋转所经过的原点，由 <code>transform-origin</code> CSS属性定义。.</p><p><code>rotateX(a)</code>是 <code>rotate3D(1, 0, 0, a)</code>的简写形式。</p><p>注意： 与平面上的旋转相反，3D旋转的组成通常也是不可交换顺序的；这意味着旋转的应用顺序至关重要。</p><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rotateX</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为 “<code>angle</code>“， 代表旋转的角度， 正角表示顺时针旋转，负角表示逆时针旋转。</p></li></ul><h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p> <code>rotateY()</code> 这个CSS 函数定义了将元素在纵坐标上旋转而不使其变形的方法。 其运动的程度由指定的角度来定义；如果是正的，则为顺时针旋转，如果是负的，则是逆时针旋转。</p><p>旋转所经过的原点，由 <code>transform-origin</code> CSS属性定义。</p><p><code>rotateY(a)</code> 是 <code>rotate3D(0, 1, 0, a)</code> 的简写形式。</p><p>注意： 与平面上的旋转相反，3D旋转的组成通常也是不可交换顺序的；这意味着旋转的应用顺序至关重要。</p><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rotateY</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为 “<code>angle</code>“ 代表旋转的角度， 正角表示顺时针旋转，负角表示逆时针旋转。</p></li></ul><h3 id="rotateZ"><a href="#rotateZ" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p> <code>rotateZ()</code>这个CSS 函数定义了将元素在z轴上旋转而不使其变形的方法。 其运动的程度由指定的角度来定义；如果是正的，则为顺时针旋转，如果是负的，则是逆时针旋转。</p><p>旋转所经过的原点，由 <code>transform-origin</code> CSS属性定义。</p><p><code>rotateZ(a)</code>是 <code>rotate3D(0, 0, 1, a)</code> 的简写形式。</p><p>注意： 与平面上的旋转相反，3D旋转的组成通常也是不可交换顺序的；这意味着旋转的应用顺序至关重要。</p><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rotateZ</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为 “<code>angle</code>“ 代表旋转的角度， 正角表示顺时针旋转，负角表示逆时针旋转。</p></li></ul><h3 id="scale"><a href="#scale" class="headerlink" title="scale()"></a><code>scale()</code></h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-scale_2_2.png" alt="scale()"></p><p>The <code>scale()</code> CSS 函数可改变元素的大小。 它可以增大或减小元素的大小，并且缩放量由矢量定义，并且它可以使在一个方向上比另一个方向更多。</p><p>这种变换的特点是矢量的坐标可定义在每个不同方向上各子完成一定比例缩放。如果矢量的两个坐标相等，则缩放是均匀的或各向同性的，并且元素的形状被保留。在这种情况下，缩放函数定义了一个同调变换。</p><p>当超出 <code>[-1, 1]</code>范围外时，缩放将在坐标方向上放大元素；当在该范围内时，它在该方向收缩元素。当等于1时，它什么也不做，当它为负时，它执行点反射和大小修改。</p><p>注意： <code>scale()</code> 函数仅在欧几里德平面(2D)中应用转换。要在空间中进行缩放，必须使用 <code>scale3D()</code> 函数。</p><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">sx</span>) 或</span><br><span class="line"><span class="selector-tag">scale</span>(<span class="selector-tag">sx</span>, <span class="selector-tag">sy</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>sx</em></p><p>该参数为 “<code>number</code>“ 类型值， 代表缩放矢量的横坐标。</p></li><li><p><strong>sy</strong></p><p>该参数为 “<code>number</code>“ 类型值，代表缩放矢量的纵坐标 。 如果不存在，则其默认值为 <strong>sx</strong>，从而导致保持元素形状进行均匀缩放。</p></li></ul><h3 id="scale3d"><a href="#scale3d" class="headerlink" title="scale3d()"></a><code>scale3d()</code></h3><p> <code>scale3d()</code> CSS 函数可改变元素的大小。由于缩放的量由矢量定义，因此可以改变不同方向的尺寸。</p><p>这种变换的特点是矢量的坐标定义在每个方向上完成多少缩放。如果矢量的三个坐标都相等，则缩放是均匀的或各向同性的，并且保持元素形状。在这种情况下，这个缩放函数就是定义了一个同调变换。</p><p>当超出[-1，1]的范围之外时，缩放比例将在坐标方向上放大元素；当在[-1，1]范围内时，它在当前方向收缩元素。当等于1时，它什么也不做，当它为负时，它执行点反射和大小修改。</p><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scale3d</span>(<span class="selector-tag">sx</span>, <span class="selector-tag">sy</span>, <span class="selector-tag">sz</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>sx</em></p><p>该参数为 “<code>number</code>“ 类型值， 代表缩放矢量的横坐标。</p></li><li><p><em>sy</em></p><p>该参数为 “<code>number</code>“ 类型值， 代表缩放矢量的纵坐标。</p></li><li><p><em>sz</em></p><p>该参数为 “<code>number</code>“ 类型值， 代表缩放矢量的z轴坐标。</p></li></ul><h3 id="scaleX"><a href="#scaleX" class="headerlink" title="scaleX()"></a>scaleX()</h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-scaleX_2.png" alt="scaleX()"> <code>scaleX()</code> 这个CSS函数是用一个常数因子来修改每个单元点的横坐标，在比例因子是1的情况下该函数是恒等变换。 缩放不是各向同性的，元素的角度也不守恒。</p><p><code>scaleX(sx)</code> 是 <code>scale(sx, 1)</code> 和 <code>scale3d(sx, 1, 1)</code> 的简写形式。</p><p><code>scaleX(-1)</code> 表示通过原点的垂直轴定义轴对称（由 <code>transform-origin</code> 属性指定）。</p><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scaleX</span>(<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>s</em></p><p>该参数为 “<code>number</code>“ 类型值， 表示在元素的每个点的横坐标上应用的缩放因子。</p></li></ul><h3 id="scaleY"><a href="#scaleY" class="headerlink" title="scaleY()"></a>scaleY()</h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-scaleY_2.png" alt="scaleY()"></p><p> <code>scaleY()</code> 这个 CSS函数用一个常数因子修改每个元素点的纵坐标，在比例因子是1的情况下该函数是恒等变换。 缩放不是各向同性的，元素的角度不守恒。</p><p><code>scaleY(sy)</code> 是 <code>scale(1, sy)</code> 和 <code>scale3d(1, sy, 1)</code> 的简写形式。</p><p><code>scaleY(-1)</code> 定义了通过原点的水平轴的轴对称（由 <code>transform-origin</code> 属性指定）。</p><h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scaleY</span>(<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>s</em></p><p>该参数为 “<code>number</code>“ 类型值，表示在元素的每个点的纵坐标上应用的缩放因子。</p></li></ul><h3 id="scaleZ"><a href="#scaleZ" class="headerlink" title="scaleZ()"></a>scaleZ()</h3><p> <code>scaleZ()</code> 这个CSS函数是用一个常数因子来修改每个单元点的z轴坐标，在比例因子是1的情况下该函数是恒等变换。 缩放不是各向同性的，元素的角度也不守恒。</p><p><code>scaleZ(sz)</code> 是 <code>scale3d(1, 1, sz)</code> 的简写形式。</p><p><code>scaleZ(-1)</code> 定义了通过原点的z轴的轴对称（由 <code>transform-origin</code> 属性指定）。</p><h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scaleZ</span>(<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>s</em></p><p>该参数为 “<code>number</code>“ 类型值，表示在元素的每个点的z轴坐标上应用的缩放因子。</p></li></ul><h3 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h3><p> <code>skew()</code> 这个CSS函数是一种用于拉伸，或者说是平移，该函数会使得在每个方向上扭曲元素上的每个点以一定角度。这是通过将每个坐标增加一个与指定角度成比例的值和到原点的距离来完成的。离原点越远，拉伸的值就越大。</p><h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">skew</span>(<span class="selector-tag">ax</span>)       或</span><br><span class="line"><span class="selector-tag">skew</span>(<span class="selector-tag">ax</span>, <span class="selector-tag">ay</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>ax</em></p><p>该参数为一个角度 “<code>angle</code>“ ， 表示用于沿着横坐标扭曲元素的角度 。</p></li><li><p><em>ay</em></p><p>该参数为一个角度 “<code>angle</code>“ ， 表示用于沿纵坐标扭曲元素的角度 。</p></li></ul><h3 id="skewX"><a href="#skewX" class="headerlink" title="skewX()"></a>skewX()</h3><p> <code>skewX()</code> 这个CSS函数是用于水平拉伸，它将元素的每个点在水平方向上扭曲一定角度。这是通过将横坐标增加一个与指定角度成比例的值以及到原点的距离来完成的。离原点越远，拉伸的值就越大。</p><h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">skewX</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为一个角度 “<code>angle</code>“ ， 表示用于沿着横坐标扭曲元素的角度。</p></li></ul><h3 id="skewY"><a href="#skewY" class="headerlink" title="skewY()"></a>skewY()</h3><p> <code>skewY()</code> 这个CSS函数是用于垂直拉伸，它将元素的每个点在垂直方向上扭曲一定角度。这是通过将纵坐标增加一个与指定角度成比例的值以及到原点的距离来完成的。离原点越远，拉伸的值就越大。</p><h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">skewY</span>(<span class="selector-tag">a</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>a</em></p><p>该参数为一个角度 “<code>angle</code>“ ，表示用于沿着纵坐标扭曲元素的角度。</p></li></ul><h3 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-translate_2.png" alt="translate()"> <code>translate()</code> 这个CSS 函数用于移动元素在平面上的位置。这种变换的特点是矢量的坐标定义了它在每个方向上的移动量。</p><h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translate</span>(<span class="selector-tag">tx</span>)       或</span><br><span class="line"><span class="selector-tag">translate</span>(<span class="selector-tag">tx</span>, <span class="selector-tag">ty</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>tx</em></p><p>该参数为 “<code>length</code>“ ，表示要移动矢量的横坐标。</p></li><li><p><em>ty</em></p><p>该参数为 “<code>length</code>“ ，表示要移动矢量的纵坐标。 如果不写，则默认与 <strong>tx </strong>值相等，例如 :  <code>translate(2)</code> 表示 <code>translate(2, 2)</code>。</p></li></ul><h3 id="translate3d"><a href="#translate3d" class="headerlink" title="translate3d()"></a>translate3d()</h3><p> <code>translate3d()</code> 这个CSS 函数用于移动元素在3D空间中的位置。 这种变换的特点是三维矢量的坐标定义了它在每个方向上的移动量。</p><h4 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translate3d</span>(<span class="selector-tag">tx</span>, <span class="selector-tag">ty</span>, <span class="selector-tag">tz</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>tx</em></p><p>该参数为 “<code>length</code>“ ，代表移动矢量的横坐标。</p></li><li><p><em>ty</em></p><p>该参数为 “<code>length</code>“ ，代表移动矢量的纵坐标。</p></li><li><p><em>tz</em></p><p>该参数为 “<code>length</code>“ 代表移动矢量的z轴坐标。 该值不能使用百分比 “<code>percentage</code>“ ；如果使用会被认为是无效属性。</p></li></ul><h3 id="translateX"><a href="#translateX" class="headerlink" title="translateX()"></a><code>translateX()</code></h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-translateX_2.png" alt="translateX()"> <code>translateX()</code> 这个CSS 函数用于在平面上水平移动元素。 这个转换的特点是 “<code>length</code>“ 定义了它的水平移动量。</p><p><code>translateX(tx)</code> 是 <code>translate(tx, 0)</code>的简写形式。</p><h4 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translateX</span>(<span class="selector-tag">t</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>t</em></p><p>该参数为 “<code>length</code>“ ，代表移动矢量的横坐标。</p></li></ul><h3 id="translateY"><a href="#translateY" class="headerlink" title="translateY()"></a>translateY()</h3><p><img src="http://olvboulzy.bkt.clouddn.com/20180321-transform-functions-translateY_2.png" alt="translateY()"> <code>translateY()</code> 这个CSS 函数用于在平面上垂直移动元素。 这个转换的特点是通过 “<code>length</code>“ 定义了它的垂直移动量。</p><p><code>translateY(ty)</code> 是 <code>translate(0, ty)</code>的简写形式。</p><h4 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translateY</span>(<span class="selector-tag">t</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>t</em></p><p>该参数为 “<code>length</code>“ 代表移动矢量的横坐标。该参数不能使用百分比 “<code>percentage</code>“ ；如果使用百分比形式，会被认为是无效参数。</p></li></ul><h3 id="translateZ"><a href="#translateZ" class="headerlink" title="translateZ()"></a>translateZ()</h3><p> <code>translateZ()</code> 这个CSS 函数用于3D空间的z轴方向移动元素， 这个转换的特点是通过 “<code>length</code>“ 定义了它的z轴方向移动量。</p><p><code>translateZ(tz)</code> 是 <code>translate3d(0, 0, tz)</code>的简写形式。</p><h4 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">translateZ</span>(<span class="selector-tag">t</span>)</span><br></pre></td></tr></table></figure><h4 id="参数-18"><a href="#参数-18" class="headerlink" title="参数"></a>参数</h4><ul><li><p><em>t</em></p><p>该参数是 “<code>length</code>“ ，代表移动矢量的z轴坐标。</p></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MDN : transform-function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;transform-function&lt;/strong&gt;用于对元素的显示做变换。通常，这种变换可以由矩阵表示，并且可以使用每个点上的矩阵乘法来确定所得到的图像。&lt;/p&gt;
&lt;p&gt;以下为3D图像关于各种转换函数的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="外文翻译" scheme="https://blog.binlv.top/categories/%E5%A4%96%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="CSS" scheme="https://blog.binlv.top/tags/CSS/"/>
    
      <category term="transform" scheme="https://blog.binlv.top/tags/transform/"/>
    
  </entry>
  
  <entry>
    <title>从onmouseover和onmouseenter说起</title>
    <link href="https://blog.binlv.top/2018/03/13/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20180313-%E4%BB%8Eonmouseover%E5%92%8Conmouseenter%E8%AF%B4%E8%B5%B7/"/>
    <id>https://blog.binlv.top/2018/03/13/编程开发/20180313-从onmouseover和onmouseenter说起/</id>
    <published>2018-03-13T10:26:45.000Z</published>
    <updated>2019-06-06T09:22:31.467Z</updated>
    
    <content type="html"><![CDATA[<p>初学JS时，<code>onmouseover</code> 和 <code>onmouseenter</code> 触发几乎一样，但在使用 <code>onmouseover</code> 和 <code>onmouseout</code> 时，发现如果在父级元素上定义事件，鼠标移动到其子元素上也会触发该事件，如下图所示，我在父div上设置<code>mouseover</code>，希望实现鼠标移入div时，其子元素p能显示，然后鼠标移走时，p再消失，类似某宝商品简介效果：</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180312-onmouseoverBug.gif?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10" alt="onmouseover使用时的一个Bug"></p><p>可以发现当鼠标从div盒子下方移入时，子盒子p会出现鬼畜现象。。。而使用 <code>onmouseenter</code> 和 <code>mouseleave</code> 时不会出现此种现象。</p><p>另外，还有如下神奇的事件：</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180312-onmouseenter.gif" alt></p><p><img src="http://olvboulzy.bkt.clouddn.com/20180312-onmouseover.gif" alt></p><a id="more"></a><p>三个div盒子的层级关系为 红div (box1)&gt; 黄div2(box2) &gt; 绿div3 (box3)，当鼠标移入绿div时，使用 <code>mouseover</code>出现的是 box3 box2 box1 ，而使用 <code>mouseenter</code> 时出现的是box1 box2 box3。</p><p>上图的实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">          *&#123;</span></span><br><span class="line"><span class="string">            margin:0;</span></span><br><span class="line"><span class="string">            padding: 0;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          #box1&#123;</span></span><br><span class="line"><span class="string">             position:relative;</span></span><br><span class="line"><span class="string">             width:600px;</span></span><br><span class="line"><span class="string">             height: 600px;</span></span><br><span class="line"><span class="string">             background:red;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          #box2&#123;</span></span><br><span class="line"><span class="string">             position: absolute;</span></span><br><span class="line"><span class="string">             width:300px;</span></span><br><span class="line"><span class="string">             height: 300px;</span></span><br><span class="line"><span class="string">             background:yellow;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">          #box3&#123;</span></span><br><span class="line"><span class="string">             position:absolute;</span></span><br><span class="line"><span class="string">             width:150px;</span></span><br><span class="line"><span class="string">             height: 150px;</span></span><br><span class="line"><span class="string">             background:green;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>box1<span class="string">"&gt;</span></span><br><span class="line"><span class="string">         &lt;div id=box2&gt;</span></span><br><span class="line"><span class="string">                &lt;div id=box3&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">         //获取元素</span></span><br><span class="line"><span class="string">         var box1 = document.getElementById("</span>box1<span class="string">");</span></span><br><span class="line"><span class="string">         var box2 = document.getElementById("</span>box2<span class="string">");</span></span><br><span class="line"><span class="string">         var box3 = document.getElementById("</span>box3<span class="string">");</span></span><br><span class="line"><span class="string">         box1.onmouseover = function  () &#123;</span></span><br><span class="line"><span class="string">           console.log("</span>box1<span class="string">");</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">         box2.onmouseover= function  () &#123;</span></span><br><span class="line"><span class="string">           console.log("</span>box2<span class="string">");</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">         box3.onmouseover= function  () &#123;</span></span><br><span class="line"><span class="string">           console.log("</span>box3<span class="string">");</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：jQuery中的<code>mouseover</code>和<code>mouseout</code>也有类似现象。</p></blockquote><p>究其原因为 <strong>事件冒泡（event bubbling）</strong>。</p><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>JavaScript与HTML之间的交互是通过 <strong>事件</strong> 实现的。</p><blockquote><p>事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间</p></blockquote><p>而 事件流 就是页面接收事件的顺序。早期 IE 和 Netscape开发团队 提出了两种不同的（几乎相反） 事件流 概念 。IE的事件流是事件冒泡流，而 Netscape 的事件流是事件捕获流。</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180313-DOM%E4%BA%8B%E4%BB%B6%E6%B5%81.png?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10" alt="DOM事件流"></p><p>开始时，<code>onmouseenter</code>为IE 独有，其他浏览器并不支持，后来各浏览器才陆续支持该事件。 </p><blockquote><p>Firefox started supporting <code>onmouseenter</code> in version 10 (January 2012) and Chrome started supported it in version 30 (October 2013) </p></blockquote><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>每个元素都有其对应事件处理函数，未定义时事件处理函数一般为 <code>null</code> 。事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。</p><p>当某元素达到触发条件时，事件处理函数会从该元素的事件处理函数一直执行到最外层 (根) 的事件处理函数后才算结束（<strong>从内到外</strong>–现象类似冒泡）。</p><blockquote><p>引用 MDN 上 关于 <code>mouseenter</code> 和 <code>mouseover</code> 的说明：</p><p><img src="http://olvboulzy.bkt.clouddn.com/20180312-MDN%E5%85%B3%E4%BA%8Emouseenter%E8%A7%A3%E9%87%8A.png" alt="MDN上关于mouserenter和mouseover的解释"></p></blockquote><p>值得注意的是，事件都属于异步语句，因此与内外层级定义事件处理函数顺序无关，但同一元素定义多个同一事件的事件处理函数，后者会覆盖前者。</p><h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>事件捕获刚好与事件冒泡思想相反，事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。当某元素达到触发条件时，事件处理函数会从最外层 (根) 的事件处理函数一直执行到该元素的事件处理函数后才算结束（<strong>从外到内</strong>–现象类似捕获）。</p><h2 id="DOM-0级-和-DOM-2级"><a href="#DOM-0级-和-DOM-2级" class="headerlink" title="DOM 0级 和 DOM 2级"></a>DOM 0级 和 DOM 2级</h2><h3 id="DOM-0级"><a href="#DOM-0级" class="headerlink" title="DOM 0级"></a>DOM 0级</h3><p>一般以on开头的事件以及jQuery中类似的那些事件都属于DOM 0级的事件，这些事件只有冒泡而无捕获，除<code>onmouerenter</code> 和 <code>onmouseleave</code> 外。</p><h3 id="DOM-2级"><a href="#DOM-2级" class="headerlink" title="DOM 2级"></a>DOM 2级</h3><p>DOM 2级事件的定义一般都使用 <code>addEventListen(事件类型，callBack,Boolean)</code> ，其中 <code>Boolean</code> 为 <code>true</code> 时表捕获阶段，<code>false</code>时为冒泡阶段。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过以上知识也就能解释开始案例中的现象：</p><p> <code>mouseover</code> 和 <code>mouseout</code> 在移动到其子元素上也会触发！</p><p>当鼠标首次移入到 <code>div</code> 的下方时触发了<code>div</code> 的<code>mouseover</code> 事件 ，此时<code>p</code>标签重叠在 <code>div</code> 上，此时 鼠标在 <code>p</code>元素上，触发了 <code>div</code> 的<code>mouseover</code> 事件，当 <code>p</code> 元素 离开 ，鼠标回到 <code>div</code> 上，再次触发 <code>div</code> 的 <code>mouseover</code> 事件，如此循环。</p><p>至于第二个例子的现象，我个人觉得是 <code>mouseenter</code> 遵循的是 <strong>事件捕获</strong>，而  <code>mouseover</code> 遵循的是 <strong>事件冒泡</strong>。</p><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初学JS时，&lt;code&gt;onmouseover&lt;/code&gt; 和 &lt;code&gt;onmouseenter&lt;/code&gt; 触发几乎一样，但在使用 &lt;code&gt;onmouseover&lt;/code&gt; 和 &lt;code&gt;onmouseout&lt;/code&gt; 时，发现如果在父级元素上定义事件，鼠标移动到其子元素上也会触发该事件，如下图所示，我在父div上设置&lt;code&gt;mouseover&lt;/code&gt;，希望实现鼠标移入div时，其子元素p能显示，然后鼠标移走时，p再消失，类似某宝商品简介效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://olvboulzy.bkt.clouddn.com/20180312-onmouseoverBug.gif?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10&quot; alt=&quot;onmouseover使用时的一个Bug&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以发现当鼠标从div盒子下方移入时，子盒子p会出现鬼畜现象。。。而使用 &lt;code&gt;onmouseenter&lt;/code&gt; 和 &lt;code&gt;mouseleave&lt;/code&gt; 时不会出现此种现象。&lt;/p&gt;
&lt;p&gt;另外，还有如下神奇的事件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://olvboulzy.bkt.clouddn.com/20180312-onmouseenter.gif&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://olvboulzy.bkt.clouddn.com/20180312-onmouseover.gif&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于JS中变量、函数声明提升优先级问题的实验</title>
    <link href="https://blog.binlv.top/2018/03/03/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/20180302-%E5%85%B3%E4%BA%8EJS%E4%B8%AD%E5%8F%98%E9%87%8F%E3%80%81%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87%E4%BC%98%E5%85%88%E7%BA%A7%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%9E%E9%AA%8C/"/>
    <id>https://blog.binlv.top/2018/03/03/编程开发/20180302-关于JS中变量、函数声明提升优先级问题的实验/</id>
    <published>2018-03-03T13:54:00.000Z</published>
    <updated>2019-06-06T09:22:31.467Z</updated>
    
    <content type="html"><![CDATA[<p>在复习JS-函数时遇到函数声明提升，回想起之前的变量声明的提升，加上JS无重载一说，若出现同名函数，则后者会覆盖前者。想搞清楚既然变量、函数都能提升，那他们之间的优先级是什么，遂做个小实验验证一下。</p><p>其实我是被自己写的一题给绕晕了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"aa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li>变量声明、函数声明都会提升执行顺序</li><li>优先级：函数声明 &gt; 变量声明</li></ul><p>验证过程如下：</p><a id="more"></a><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="变量声明的提升"><a href="#变量声明的提升" class="headerlink" title="变量声明的提升"></a>变量声明的提升</h2><p>直接看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;  </span><br><span class="line"><span class="comment">//结果为控制台打印 undefined</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a=<span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>这就是变量声明提升–JS中，变量的声明会在其作用域内的最先运行。</p><h2 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h2><p>直接看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//结果为控制台打印该函数</span></span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="函数表达式声明"><a href="#函数表达式声明" class="headerlink" title="函数表达式声明"></a>函数表达式声明</h3><p>函数声明提升不适用于函数表达式，但在判断优先级时可作为很强的干扰项，看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//结果为控制台打印 undefined</span></span><br></pre></td></tr></table></figure><p>其实这个就是变量声明的提升。。。等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>Chrome 63.0.3239.132 (正式版)  （64位）</li></ul><h2 id="变量声明与函数表达式声明"><a href="#变量声明与函数表达式声明" class="headerlink" title="变量声明与函数表达式声明"></a>变量声明与函数表达式声明</h2><p>看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>结果为控制台打印如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> <span class="comment">//变量声明提升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">//后者覆盖前者</span></span><br></pre></td></tr></table></figure><h2 id="变量声明与函数声明"><a href="#变量声明与函数声明" class="headerlink" title="变量声明与函数声明"></a>变量声明与函数声明</h2><p>看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>结果为控制台打印如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">//函数声明提升</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>代码等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;<span class="comment">//变量声明提升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;&#125;<span class="comment">//函数声明提升</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>这里有个疑问，到底是var a;变量声明提升在前，还是function a 函数声明在前。验证了一下，不管谁在前，运行结果都一样。</p><p>个人开始认为应该是 变量 (全局) 声明在前，函数声明提升在后，后者覆盖前者，所以第一个 <code>console.log(a);</code> 打印函数a。</p><p><strong>验证：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//控制台打印出window对象</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p><img src="http://olvboulzy.bkt.clouddn.com/20180302-102320.png?watermark/2/text/aHR0cDovL2Jpbmx2LnRvcA==/font/YXJpYWw=/fontsize/260/fill/I0VGRUZFRg==/dissolve/100/gravity/South/dx/10/dy/10" alt></p><p>后查阅<a href="https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch4.md" target="_blank" rel="noopener">《You Don’t Know JS:Scope &amp; Closures》</a>的第四章关于声明提升的说法是，<code>function</code> 声明 优先于 <code>var</code> 声明，尽管 <code>var</code> 写在前，但 <code>function</code> 声明优先，<code>var</code> 声明被忽略了。</p><p>被忽略了？？</p><p>emmmm…</p><h2 id="函数声明与函数表达式声明"><a href="#函数声明与函数表达式声明" class="headerlink" title="函数声明与函数表达式声明"></a>函数声明与函数表达式声明</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">haha();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> haha = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"●"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">haha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"□"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">haha();</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为：</span></span><br><span class="line"><span class="comment">// □ 函数声明的优先级高于表达式声明</span></span><br><span class="line"><span class="comment">// ● 优先级低的覆盖前者</span></span><br></pre></td></tr></table></figure><p>这或许是要看JS引擎源码才能知道答案吧…</p><p>所以，</p><p><strong>开头那题的答案：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//function a () &#123;console.log("aa")&#125;  函数声明提升至最前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//100  变量声明并赋值后覆盖了前者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//function () &#123;console("a")&#125;  函数表达式声明覆盖了前者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"aa"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//function () &#123;console("a")&#125;  无新赋值了。</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions" target="_blank" rel="noopener">MDN关于函数的讲解</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch4.md" target="_blank" rel="noopener">You-Dont Know-JS:Scope &amp; Closures—Chapter 4: Hoisting</a></li><li><a href="https://www.cnblogs.com/oxiaojiano/p/7918967.html" target="_blank" rel="noopener">cnblogs上一篇关于优先级问题的文章</a></li><li><a href="http://www.jb51.net/article/79437.htm" target="_blank" rel="noopener">极易被忽视的javascript面试题七问七答</a></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在复习JS-函数时遇到函数声明提升，回想起之前的变量声明的提升，加上JS无重载一说，若出现同名函数，则后者会覆盖前者。想搞清楚既然变量、函数都能提升，那他们之间的优先级是什么，遂做个小实验验证一下。&lt;/p&gt;
&lt;p&gt;其实我是被自己写的一题给绕晕了&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;aa&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;变量声明、函数声明都会提升执行顺序&lt;/li&gt;
&lt;li&gt;优先级：函数声明 &amp;gt; 变量声明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;验证过程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo同步源文件至GitHub</title>
    <link href="https://blog.binlv.top/2018/02/26/20180226-Hexo%E5%90%8C%E6%AD%A5%E6%BA%90%E6%96%87%E4%BB%B6%E8%87%B3GitHub/"/>
    <id>https://blog.binlv.top/2018/02/26/20180226-Hexo同步源文件至GitHub/</id>
    <published>2018-02-26T09:00:34.000Z</published>
    <updated>2019-06-06T09:22:31.467Z</updated>
    
    <content type="html"><![CDATA[<p>以前用Hexo最大的痛点就是想在其他电脑上写文章然后更新站点很麻烦，或者换系统后发现忘记备份源文件，然后以前写的东西又得通过各种方法找回再重新部署。没办法，静态站点就是这样。</p><p>此时程序员思维就出现了，能不能在我每次写完新文章后自动备份源文件，或者我在<code>hexo d</code>的时候一起把我的<code>.md</code>文件也deploy上去。</p><p>当然，方法各种，这里我直接使用 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> 这个小插件的功能，相对简单些。</p><a id="more"></a><h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p>直接一句话搞定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>当然，作者说如果想使用最新版，可用下面的命令：</p><ul><li>对于npm版本低于4的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install git+git@github.com:hexojs/hexo-deployer-git.git --save</span></span><br></pre></td></tr></table></figure><ul><li>对于npm版本低于5的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save</span></span><br></pre></td></tr></table></figure><blockquote><p>查看自己npm版本的命令：<code>npm --version</code></p></blockquote><p>其实如果你原先就是将hexo部署在GitHub Pages，那这个插件是已经安装过了，只需要进行相关配置就行。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>修改hexo根目录下的<code>_config.yml</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> _config.yaml</span></span><br><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: master</span><br><span class="line">  - type: git</span><br><span class="line">    repo: git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">    branch: src</span><br><span class="line">    extend_dirs: /</span><br><span class="line">    ignore_hidden: false</span><br><span class="line">    ignore_pattern:</span><br><span class="line">        public: .</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>第一个master分支是你静态页面所在分支，也就是<code>hexo g</code>后生成的<code>public</code>文件夹中的内容</li><li>第二个src分支就是备份你源文件的，具体参数请参考原作者写的</li></ul><p>如此之后，在每次<code>hexo d</code>后就能将你的源文件备份至<code>src</code>分支，没有更爽。</p><p>当然，安装后每次 deploy 会比原来稍慢点。</p><p>还有，未配置过<code>git user</code>信息的会提示要配置user.mail和user.name：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email "you@example.com"</span><br><span class="line">git config --global user.name "Your Name"</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git 的GitHub地址</a> </li><li><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Hexo官方关于deployment的说明</a></li><li><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">知乎上关于换电脑后hexo该怎么更新的回答</a></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前用Hexo最大的痛点就是想在其他电脑上写文章然后更新站点很麻烦，或者换系统后发现忘记备份源文件，然后以前写的东西又得通过各种方法找回再重新部署。没办法，静态站点就是这样。&lt;/p&gt;
&lt;p&gt;此时程序员思维就出现了，能不能在我每次写完新文章后自动备份源文件，或者我在&lt;code&gt;hexo d&lt;/code&gt;的时候一起把我的&lt;code&gt;.md&lt;/code&gt;文件也deploy上去。&lt;/p&gt;
&lt;p&gt;当然，方法各种，这里我直接使用 &lt;a href=&quot;https://github.com/hexojs/hexo-deployer-git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-deployer-git&lt;/a&gt; 这个小插件的功能，相对简单些。&lt;/p&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://blog.binlv.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="Hexo" scheme="https://blog.binlv.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JS笔试基础知识点</title>
    <link href="https://blog.binlv.top/2018/01/18/20180118-JS%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://blog.binlv.top/2018/01/18/20180118-JS面试基础知识点/</id>
    <published>2018-01-18T12:20:00.000Z</published>
    <updated>2019-06-06T09:22:31.466Z</updated>
    
    <content type="html"><![CDATA[<p>听公开课讲得一些JS笔试中容易出现的知识点。</p><p>与其说是知识点，不如说是—“那些年走过的JS大坑”</p><p>一般关于JS的笔试会走两极端—-要么很基础的知识点，要么考察最新JS框架（或结合公司已使用技术）</p><a id="more"></a><h1 id="字面量相关"><a href="#字面量相关" class="headerlink" title="字面量相关"></a>字面量相关</h1><p>定义：计算机能识别类型的数据。</p><h2 id="特殊字面量"><a href="#特殊字面量" class="headerlink" title="特殊字面量"></a>特殊字面量</h2><p>顾名思义，计算机识别不了的—NaN，指的不是一个正常的数。</p><h2 id="常见考察点"><a href="#常见考察点" class="headerlink" title="常见考察点"></a>常见考察点</h2><ul><li>正数/0=正无穷Infinity</li><li>0/0=NaN</li><li>parseInt(“string”); 将字符串转为整数的数字类型，条件：纯数字字符串或数字开头字符串，其他为NaN</li><li>数据类型参与数值运算：<ul><li>”数据类型—数字、字符串、undefined、布尔、null”；</li><li>”数学运算— + - * / %”。</li><li>非数字参与数学运算会把非数字转换（<strong>隐式转换</strong>）为数字再参与运算。除null、false转换为0，数字字符串转为数字，其余包括undefined为NaN</li></ul></li></ul><h1 id="各种运算符"><a href="#各种运算符" class="headerlink" title="各种运算符"></a>各种运算符</h1><h2 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h2><ul><li><code>==</code> 相等  <code>===</code>全等于，即除判断值是否相等，还要判断数据类型，如<code>1</code>和<code>true</code>。<code>!=</code> 不相等（与<code>==</code>相反）</li><li>比较运算的结果就是布尔值，<code>true</code>/<code>false</code></li><li>其他数据参与比较运算时，也会隐式转换为数字参与运算</li><li><code>NaN</code>参与的话，无论与谁都是不等于<code>false</code></li><li><code>IsNaN()</code>方法，判断一个数是否能转为<code>NaN</code>，能<code>true</code>，否<code>false</code>，能转的有：非数字字符串、<code>undefined</code></li></ul><h2 id="等式"><a href="#等式" class="headerlink" title="等式"></a>等式</h2><p>上面说到了比较运算符 <code>==</code> 和<code>===</code>，下面总结一下与等式(包括<code>==</code>, <code>===</code>, <code>!=</code>, 和 <code>!==</code>)相关的东西。</p><p>首先说下<code>==</code>和<code>===</code>的区别，<code>==</code>只检查<strong>值(value)</strong>是否相同，而<code>===</code>不仅比较<strong>值(value)</strong>还要检查<strong>数据类型(type)</strong>是否相同，所以<code>==</code>又叫做<strong>松等于(loose-equality)</strong> ，<code>===</code>又叫做<strong>严格等于(strict-equality)</strong>。</p><blockquote><p><strong>注1：</strong>在比较时，若比较两端非<code>number</code>类型，则会自动转换为<code>number</code>类型再进行比较。</p><p><strong>注2：</strong>如果比较两个非原始值，比如对象<code>object</code>（包括函数<code>function</code>和数组<code>array</code>）。因为这些值实际上是通过引用保存的，所以<code>==</code>和<code>===</code>比较都只是检查引用是否匹配，而不是基本值。</p></blockquote><p>例子一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">a == b;<span class="comment">// true</span></span><br><span class="line">a === b;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"1,2,3"</span>;</span><br><span class="line"></span><br><span class="line">a == c;<span class="comment">// true</span></span><br><span class="line">b == c;<span class="comment">// true</span></span><br><span class="line">a == b;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这时候就有一个问题，什么时候使用<code>==</code>，什么时候使用<code>===</code>呢？有如下几个基本规则：</p><ul><li>如果比较两端值的类型是<code>boolean</code>类型，<code>true/false</code>，则尽量使用<code>===</code>，而不用<code>==</code>；</li><li>如果比较两端的值是些特别的值(<code>0</code>, <code>&quot;&quot;</code>, or <code>[]</code> – empty array)，则尽量使用<code>===</code>，而不用<code>==</code>；</li><li>其他都用<code>==</code>吧</li></ul><h2 id="不等式"><a href="#不等式" class="headerlink" title="不等式"></a>不等式</h2><p>有等式当然就有不等式，有<code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, 和 <code>&gt;=</code>四种不等式。一般用于比较<code>number</code>类型，但在JavaScript中<code>string</code>值也能被比较。</p><blockquote><p><strong>注：</strong>这里没有严格不等式。</p></blockquote><p>例子一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">41</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"43"</span>;</span><br><span class="line"></span><br><span class="line">a &lt; b;<span class="comment">// true</span></span><br><span class="line">b &lt; c;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line">a &lt; b;<span class="comment">// false</span></span><br><span class="line">a &gt; b;<span class="comment">// false</span></span><br><span class="line">a == b;<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>例子二中 b值的类型是<code>string</code>，在参与不等式比较时，会强制转换为<code>NaN</code>，而<code>NaN</code>和谁都不相等，包括和它自己。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符 +="></a>赋值运算符 +=</h2><ul><li>必须有变量参与运算</li><li>特殊：++递加- -递减，变量出现一次叫做使用一次。可为a++或++a</li></ul><h2 id="逻辑运算符-amp-amp-、-、"><a href="#逻辑运算符-amp-amp-、-、" class="headerlink" title="逻辑运算符 &amp;&amp; 、||、!"></a>逻辑运算符 &amp;&amp; 、||、!</h2><ul><li>规律：逻辑与和逻辑或，答案都与第一个操作数a能够判读为true/false有关，如判断为假的有—null、undefined、0、NaN、” ” 空字符串；判断为真—非0非NaN数字、非空字符串</li><li>与运算&amp;&amp;：a&amp;&amp;b，如果a为true，则结果就是b；如果a为false，则为false</li><li>逻辑或||：a||b，如果a为true，结果就是true；如果a为false，则结果为b</li><li>逻辑非：</li></ul><h2 id="Truthy-amp-Falsy"><a href="#Truthy-amp-Falsy" class="headerlink" title="Truthy &amp; Falsy"></a>Truthy &amp; Falsy</h2><p>总结一下一些奇葩的<code>boolean</code>类型，一般性的布尔值没什么好说的。特别提下一些会被判断为truthy和falsy。</p><p>一些特别的”falsy”如下：</p><ul><li><code>&quot;&quot;</code> (empty string)</li><li><code>0</code>，<code>-0</code>，<code>NaN</code> (invalid number)</li><li><code>null</code>,<code>undefined</code></li><li><code>false</code></li></ul><p>一些特别的“truthy”如下:</p><ul><li><code>&quot;hello&quot;</code></li><li><code>42</code></li><li><code>true</code></li><li><code>[ ]</code>, <code>[ 1, &quot;2&quot;, 3 ]</code> (arrays)</li><li><code>{ }</code>, <code>{ a: 42 }</code> (objects)</li><li><code>function foo() { .. }</code> (functions)</li></ul><h2 id="三元运算符—"><a href="#三元运算符—" class="headerlink" title="三元运算符— ? :"></a>三元运算符— ? :</h2><p>或作为条件分支语句</p><p>​         Boolean_expression? true_value : false_value;</p><h1 id="变量、作用域"><a href="#变量、作用域" class="headerlink" title="变量、作用域"></a>变量、作用域</h1><ul><li>JS中无{}块作用域，只有函数结构function封住一个作用域。</li><li>局部变量/全局变量。不同作用域中如都定义了同一个名字的变量，有一个查找作用域链—从内到外(如本层(层指的是function)有直接使用，如无依次向外层查找)</li><li>如变量未定义直接使用会提示引用错误，但可先使用再定义变量，但会导致变量声明提升问题undefined—JS解释器解释代码时，会将所有变量定义的过程提升到作用域代码最前面，相当于先定义了，但未赋值，默认undefined。</li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>这个必考。。。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>函数就是闭包。</li><li>函数是一种对象型数据，对象型数据创建时有一个数据原型，如果将一个对象型数据赋值给变量，则变量中存的不是原型，而是指针/地址</li><li>如果将一个变量赋值给另一个变量，相当于将地址复制一份给另一个变量</li><li>每一个通过function定义的函数都是一个新的闭包</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n+ i++);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fo();</span><br><span class="line">f(<span class="number">20</span>);</span><br><span class="line">fo()(<span class="number">20</span>);</span><br><span class="line">fo()(<span class="number">10</span>);</span><br><span class="line">f(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>   <span class="comment">//n=20,i=0,n+i=20,i++后得1，输出20</span></span><br><span class="line"><span class="number">20</span> <span class="comment">//创建新闭包，结果同上</span></span><br><span class="line"><span class="number">10</span> <span class="comment">//同理</span></span><br><span class="line"><span class="number">11</span> <span class="comment">//由于前f(20);影响，i为1，第二次执行f();则为11，I、i++后得3</span></span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">arr1.push(arr1.shift());</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>数组也是对象型数据，存储给变量时，给的是指向数据原型的地址。</li><li>shift();</li><li>push();</li></ul><p>结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5.6</span>,<span class="number">7</span>,<span class="number">8</span>]<span class="comment">//arr2[0]=8;    #[8,5,6,7]</span></span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]<span class="comment">//arr1.push(arr1.shift());#[5,6,7,8]</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md" target="_blank" rel="noopener">You-Dont-Know-JS:: Up &amp; Going</a></li></ul><p>待续。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听公开课讲得一些JS笔试中容易出现的知识点。&lt;/p&gt;
&lt;p&gt;与其说是知识点，不如说是—“那些年走过的JS大坑”&lt;/p&gt;
&lt;p&gt;一般关于JS的笔试会走两极端—-要么很基础的知识点，要么考察最新JS框架（或结合公司已使用技术）&lt;/p&gt;
    
    </summary>
    
      <category term="编程开发" scheme="https://blog.binlv.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://blog.binlv.top/tags/JavaScript/"/>
    
      <category term="面筋" scheme="https://blog.binlv.top/tags/%E9%9D%A2%E7%AD%8B/"/>
    
  </entry>
  
  <entry>
    <title>RHEL7.0日志分析记录</title>
    <link href="https://blog.binlv.top/2017/12/20/20171220-RHEL7.0%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.binlv.top/2017/12/20/20171220-RHEL7.0日志分析记录/</id>
    <published>2017-12-20T00:20:00.000Z</published>
    <updated>2019-06-06T09:22:31.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近一个客户服务老挂，检查服务器，无法ping通且登录界面黑屏，只能强行重启，尝试检查日志发现默认日志为重启删除，坑。</p><a id="more"></a><p><strong>服务器信息</strong></p><ul><li>Red Hat Enterprise Linux Server release 7.0 (Maipo)</li></ul><h1 id="日志相关回顾"><a href="#日志相关回顾" class="headerlink" title="日志相关回顾"></a>日志相关回顾</h1><p>一般位置：<code>/var/log</code></p><h2 id="常见日志："><a href="#常见日志：" class="headerlink" title="常见日志："></a>常见日志：</h2><ul><li><p>/var/log/boot.log</p><p>顾名思义，系统启动日志，仅保留本次开机</p></li><li><p>/var/log/cron</p><p>所有<code>crontab</code>计划任务日志</p></li><li><p>/var/log/lastlog</p><p>记录系统所有账号最后登录信息</p></li></ul><ul><li><p>/var/log/maillog &amp;  /var/log/mail/*</p><p>往来邮件日志记录</p></li><li><p>/var/log/messages</p><p>系统重要信息基本都在这，为必看日志</p></li><li><p>/var/log/secure</p><p>凡是需要账号密码的日志都在里面</p></li></ul><h2 id="主要进程服务-daemon"><a href="#主要进程服务-daemon" class="headerlink" title="主要进程服务(daemon)"></a>主要进程服务(daemon)</h2><ul><li>systemd-journald.service  7系列版本新增，默认存在内存中，重启即失效，本次日志分析主要用的</li><li>rsyslog.service 记录系统和网络的信息，配置文件<code>/etc/rsyslog.conf</code></li><li>logrotate 用于日志自动化处理的服务，配置文件<code>/etc/logrotate.conf</code></li></ul><h2 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h2><ul><li>debug </li><li>info</li><li>notice</li><li>warning(warn) </li><li>err(error)  重大错误信息</li><li>crit</li><li>alert</li><li>emerg(panic)</li></ul><blockquote><p>注：在讯息等级之前还有.[=!] 的连结符号，代表的意思是这样的：</p><ul><li>.：代表『比后面还要严重的等级(含该等级)都被记录下来』的意思，例如： mail.info代表只要是mail的资讯，而且该资讯等级严重于info (含info本身)时，就会被记录下来的意思。</li><li>.=：代表所需要的等级就是后面接的等级而已，其他的不要！</li><li>.!：有点反向选择的感觉，代表忽略大于等于这个等级的讯息！亦即是低于这个等级的才会被纪录的意思！</li></ul></blockquote><h1 id="使用journalctl查看日志"><a href="#使用journalctl查看日志" class="headerlink" title="使用journalctl查看日志"></a>使用journalctl查看日志</h1><h2 id="journalctl命令"><a href="#journalctl命令" class="headerlink" title="journalctl命令"></a>journalctl命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># journalctl [-nrpf] [--since TIME] [--until TIME] _optional </span></span><br><span class="line">选项与参数：</span><br><span class="line">预设会show出全部的<span class="built_in">log</span> 内容，从旧的输出到最新的日志</span><br><span class="line">-n ：show出最近的几行的意思～找最新的日志相当有用</span><br><span class="line">-r ：反向输出，从最新的输出到最旧的资料</span><br><span class="line">-p ：show出后面所接的日志重要性排序！</span><br><span class="line">-f ：类似tail -f 的功能，持续显示journal 日志的内容(即时监测时相当有帮助！)</span><br><span class="line">--since --until：设定开始与结束的时间，让在该期间的资料输出而已</span><br><span class="line">_SYSTEMD_UNIT=unit.service ：只输出unit.service 的日志而已</span><br><span class="line">_COMM=bash ：只输出与bash 有关的日志</span><br><span class="line">_PID=pid ：只输出PID 号码的日志</span><br><span class="line">_UID=uid ：只输出UID 为uid 的日志</span><br><span class="line">SYSLOG_FACILITY=[0-23] ：使用syslog.h 规范的服务相对序号来呼叫出正确的资料！</span><br></pre></td></tr></table></figure><p>例子：</p><p>查看特定优先级日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># journalctl -p err</span></span><br></pre></td></tr></table></figure><p>查看特定时间日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># journalctl --since "2017-12-17" --until "2017-12-19"</span></span><br></pre></td></tr></table></figure><p>显示本次启动后日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># journalctl -b [-0/-1/-2] #-0表本次启动信息，-1表上次启动</span></span><br></pre></td></tr></table></figure><h2 id="永久保存记录办法"><a href="#永久保存记录办法" class="headerlink" title="永久保存记录办法"></a>永久保存记录办法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@binlv ~]<span class="comment"># mkdir /var/log/journal</span></span><br><span class="line">[root@binlv ~]<span class="comment"># chown root:systemd-journal /var/log/journal/</span></span><br><span class="line">[root@binlv ~]<span class="comment"># chmod 2755 /var/log/journal/</span></span><br><span class="line">[root@binlv ~]<span class="comment"># killall -USR1 systemd-journald</span></span><br></pre></td></tr></table></figure><blockquote><p>注：默认情况下，日志大小不能超过所处文件系统的10%，也不可使所处文件系统空间低于15%。在 /etc/systemd/journald.conf 可进行大小容量上的调节；而在 /etc/logrotate.conf 则定义了那些日志文件记录、怎么记录、记录多少。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.linuxidc.com/Linux/2016-01/127729.htm" target="_blank" rel="noopener">RHEL7.0日志系统</a></li><li><a href="http://linux.vbird.org/linux_basic/0570syslog.php#whatis_syslog_1" target="_blank" rel="noopener">鸟哥私房菜之syslog</a></li><li><a href="http://www.cnblogs.com/itxdm/p/Systemd_log_system_journalctl.html" target="_blank" rel="noopener">Systemd 日志系统</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近一个客户服务老挂，检查服务器，无法ping通且登录界面黑屏，只能强行重启，尝试检查日志发现默认日志为重启删除，坑。&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://blog.binlv.top/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://blog.binlv.top/tags/Linux/"/>
    
      <category term="log" scheme="https://blog.binlv.top/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>NBU catalog报错处理办法</title>
    <link href="https://blog.binlv.top/2017/12/08/20171208-NBU%20catalog%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/"/>
    <id>https://blog.binlv.top/2017/12/08/20171208-NBU catalog报错处理办法/</id>
    <published>2017-12-08T04:19:12.000Z</published>
    <updated>2019-06-06T09:22:31.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h1><ul><li><p>环境说明：</p><ul><li>NBU 7.7.3 Master Server</li><li>Windows Server 2008R2 x64操作系统</li></ul></li><li><p>NBU Master Server备份catalog一直报错，错误代码2</p><ul><li><p>status详细信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2017-12-8 8:40:23 - Info bpdbm (pid=12608) staging relational database files <span class="keyword">for</span> catalog backup</span><br><span class="line">2017-12-8 8:40:23 - Info bpdbm (pid=12608) staging NBAZDB backup to C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:24 - Info bpdbm (pid=12608) <span class="keyword">done</span> staging NBAZDB backup to C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:24 - Info bpdbm (pid=12608) staging NBDB backup to C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:30 - Info bpdbm (pid=12608) <span class="keyword">done</span> staging NBDB backup to C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:59 - Info bpdbm (pid=12608) validating NBAZDB backup <span class="keyword">in</span> C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:59 - Error bpdbm (pid=12608) error validating NBAZDB backup <span class="keyword">in</span> C:\Program Files\Veritas\NetBackupDB\staging.</span><br><span class="line">2017-12-8 8:40:59 - Info bpdbm (pid=12608) validating NBDB backup <span class="keyword">in</span> C:\Program Files\Veritas\NetBackupDB\staging</span><br><span class="line">2017-12-8 8:40:59 - Error bpdbm (pid=12608) error validating NBDB backup <span class="keyword">in</span> C:\Program Files\Veritas\NetBackupDB\staging.</span><br><span class="line">none of the requested files were backed up  (2)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查系统进程 已运行700+进程，怀疑进程过多导致Master hang死</p></li></ul><a id="more"></a><h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><h2 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h2><p>根据报错信息，定位<code>C:\Program Files\Veritas\NetBackupDB\staging</code>目录，删除该目录文件，重启服务后手动发起catalog备份，成功。</p><p>第二天再发起再次报错，非长久之计。</p><h2 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h2><p>报case，协助工程师收集cab。</p><p>对于Windows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\system32\chcp 437</span><br><span class="line">C:\Program Files\Veritas\netbackup\bin\support\nbsu -use_reg_cmd 64 (<span class="keyword">for</span> 64bit)</span><br></pre></td></tr></table></figure><p>执行nbsu到network service卡住，询问工程师终止命令，执行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Veritas\netbackup\bin\support\nbsu -c -use_reg_cmd 64</span><br></pre></td></tr></table></figure><p>产生LOG 的路径:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Veritas\netbackup\bin\support\output\nbsu (后缀名是cab)</span><br></pre></td></tr></table></figure><p>后操作如下</p><ol><li><p>Delete the outstanding nbtelemetry.exe processes in task manager, this in turn stopped the nbtelesched.exe processes. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist</span><br><span class="line">taskkill /im nbtelemetry.exe /f</span><br></pre></td></tr></table></figure><p>强制结束进程</p></li><li><p>Once these were deleted, went into directory Program files\Veritas\Netbackup\bin<br>Renamed nbtelemetry.exe and nbtelesched.exe to nbtelemetry.exe.old and nbtelesched.exe.old. </p><p>若无法重命名，重启机器再修改</p></li><li><p>Run regedit and go to the following key<br>HKLM(HKEY_LOCAL_MACHINE)\Software\VERITAS\NetBackup\CurrentVersion\Config\TELEMETRY_UPLOAD<br>Changed TELEMETRY_UPLOAD from YES to NO under the registry editor.</p><p>再次发起catalog备份，正常。</p></li></ol><p>观察几天，进程数不超过100，且备份catalog不报错.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="NBU-catalog"><a href="#NBU-catalog" class="headerlink" title="NBU catalog"></a>NBU catalog</h2><p>NetBackup自身有一索引数据库，主要记录每次备份的相关信息。比如从哪个Client备<br>份的，保留多长时间等。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现象描述&quot;&gt;&lt;a href=&quot;#现象描述&quot; class=&quot;headerlink&quot; title=&quot;现象描述&quot;&gt;&lt;/a&gt;现象描述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;环境说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NBU 7.7.3 Master Server&lt;/li&gt;
&lt;li&gt;Windows Server 2008R2 x64操作系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NBU Master Server备份catalog一直报错，错误代码2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;status详细信息如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:23 - Info bpdbm (pid=12608) staging relational database files &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; catalog backup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:23 - Info bpdbm (pid=12608) staging NBAZDB backup to C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:24 - Info bpdbm (pid=12608) &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; staging NBAZDB backup to C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:24 - Info bpdbm (pid=12608) staging NBDB backup to C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:30 - Info bpdbm (pid=12608) &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; staging NBDB backup to C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:59 - Info bpdbm (pid=12608) validating NBAZDB backup &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:59 - Error bpdbm (pid=12608) error validating NBAZDB backup &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; C:\Program Files\Veritas\NetBackupDB\staging.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:59 - Info bpdbm (pid=12608) validating NBDB backup &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; C:\Program Files\Veritas\NetBackupDB\staging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017-12-8 8:40:59 - Error bpdbm (pid=12608) error validating NBDB backup &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; C:\Program Files\Veritas\NetBackupDB\staging.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;none of the requested files were backed up  (2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查系统进程 已运行700+进程，怀疑进程过多导致Master hang死&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://blog.binlv.top/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Netbackup" scheme="https://blog.binlv.top/tags/Netbackup/"/>
    
  </entry>
  
  <entry>
    <title>Oracle参数文件</title>
    <link href="https://blog.binlv.top/2017/12/05/20171205-Oracle%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.binlv.top/2017/12/05/20171205-Oracle参数文件/</id>
    <published>2017-12-05T14:20:00.000Z</published>
    <updated>2019-06-06T09:22:31.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因为平时做数据库恢复需检查pfile文件，对这方面空白较多，查了点资料，详细了解一下。</p><a id="more"></a><h1 id="参数文件类型"><a href="#参数文件类型" class="headerlink" title="参数文件类型"></a>参数文件类型</h1><p>pfile –parameter file 文本文件</p><p>spfile –server parameter file  二进制文件</p><p>9i后才有，通过alter system 修改到spfile 下次启动生效</p><h2 id="pfile"><a href="#pfile" class="headerlink" title="pfile"></a>pfile</h2><p>作用：文件记录数据库配置与功能开启或关闭</p><p>数据库启动时需读取参数文件内容，实例启动后就一直在内存中。</p><p>文件位置：通过dbca图形工具建立数据库，有一个模板参数文件pfile</p><p><code>$ORACLE_BASE/admin/&lt;db_unique_name&gt;/pfile/init.ora.&lt;n+&gt;</code></p><p>修改到参数文件达到时候需要关闭数据库然后才有效</p><p>10g后只有spfile <code>$ORACLE_BASE/dbs/spfile$ORACLE_SID.ora</code></p><p>手工建库没有模板参数文件</p><p>##spfile</p><p>通过pfile文件可以定义spfile=’’路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql&gt; show parameter spfile</span><br></pre></td></tr></table></figure><p>数据库读取参数文件顺序</p><ol><li><code>ORACLE_HOME/dbs/spfile&lt;SID&gt;.ora</code></li><li><code>ORACLE_HOME/dbs/spfile.ora</code></li><li><code>ORACLE_HOME/dbs/init&lt;SID&gt;.ora</code></li></ol><blockquote><p>注：</p><p>若维护的是RAC，不要执行create pfile from spfile;</p><p>因为若spfile文件丢失，启动一个实例，执行create spfile from pfile;后sfile会存放在<code>ORACLE_HOME/dbs/spfile&lt;SID&gt;.ora</code>，再启动一个实例后会想修改参数文件会报错，为非共享文件。</p><p>维护ASM存放参数文件也不能使用create pfile命令</p></blockquote><h1 id="修改参数文件"><a href="#修改参数文件" class="headerlink" title="修改参数文件"></a>修改参数文件</h1><h2 id="修改pfile"><a href="#修改pfile" class="headerlink" title="修改pfile"></a>修改pfile</h2><p>pfile一般修改需要重启数据库才能生效</p><p>startup force</p><h2 id="修改spfile"><a href="#修改spfile" class="headerlink" title="修改spfile"></a>修改spfile</h2><p>参数分类：</p><p>系统参数：alter system set 参数=值 scope=memory|spfile|both [sid=’…’];</p><p>会话参数 alter session set 参数=值;</p><p>系统参数的分类：</p><ol><li>动态 alter system set 参数=值; alter system set 参数=值 scope=memory;</li><li>静态 alter system set 参数=值 scope=spfile;</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;因为平时做数据库恢复需检查pfile文件，对这方面空白较多，查了点资料，详细了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://blog.binlv.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="oracle" scheme="https://blog.binlv.top/tags/oracle/"/>
    
      <category term="pfile" scheme="https://blog.binlv.top/tags/pfile/"/>
    
      <category term="spfile" scheme="https://blog.binlv.top/tags/spfile/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+Hexo+SSL搭建个人站点</title>
    <link href="https://blog.binlv.top/2017/11/28/20171128-Nginx-Hexo-SSL%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9/"/>
    <id>https://blog.binlv.top/2017/11/28/20171128-Nginx-Hexo-SSL搭建个人站点/</id>
    <published>2017-11-28T06:09:02.000Z</published>
    <updated>2019-06-06T09:22:31.466Z</updated>
    
    <content type="html"><![CDATA[<p>给闲置VPS增加点用处系列</p><a id="more"></a><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx相关安装配置参照我的<a href="https://binlv.top/2017/11/27/20171127-部署Nginx服务与基本配置/" target="_blank" rel="noopener">上一篇关于Nginx配置的文章</a></p><h1 id="Hexo-部署至Nginx"><a href="#Hexo-部署至Nginx" class="headerlink" title="Hexo 部署至Nginx"></a>Hexo 部署至Nginx</h1><p>一般有三种方法</p><ul><li>git设置git hook方式</li><li>rsync同步本地Hexo至VPS</li><li>VPS上部署Hexo，并执行<code>hexo server</code> ，再配置Nginx反向代理，让域名指向 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li></ul><h2 id="git-hook方式"><a href="#git-hook方式" class="headerlink" title="git hook方式"></a>git hook方式</h2><h3 id="配置服务器环境"><a href="#配置服务器环境" class="headerlink" title="配置服务器环境"></a>配置服务器环境</h3><p>安装git并创建仓库，设置git hook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git -y</span><br><span class="line">mkdir &lt;git工作目录&gt; &amp;&amp; <span class="built_in">cd</span> &lt;git工作目录&gt;</span><br><span class="line">git init --bare</span><br><span class="line">nano &lt;git工作目录&gt;/hook/post-reveive</span><br></pre></td></tr></table></figure><p>将以下内容修改好放入<code>post-reveive</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">GIT_REPO=/var/www/blog.git  <span class="comment">#git仓库</span></span><br><span class="line">TMP_GIT_CLONE=/tmp/blog</span><br><span class="line">PUBLIC_WWW=/var/www/blog <span class="comment">#网站目录</span></span><br><span class="line">rm -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class="line">git <span class="built_in">clone</span> <span class="variable">$GIT_REPO</span> <span class="variable">$TMP_GIT_CLONE</span></span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure><p>或使用如下命令放入<code>post-reveive</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash -l</span></span><br><span class="line">git --work-tree=/var/www/blog --git-dir=/var/www/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><h3 id="在本机配置"><a href="#在本机配置" class="headerlink" title="在本机配置"></a>在本机配置</h3><p>在博客目录下运行下面命令，安装 git 部署工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改博客的配置文件 _config.yml，修改deploy选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: 用户名@服务器地址:/var/www/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h1 id="开启站点HTTPS"><a href="#开启站点HTTPS" class="headerlink" title="开启站点HTTPS"></a>开启站点HTTPS</h1><p>https需要授权证书，这里使用的是<a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>家的免费证书。</p><p>对了，要开启HTTPS首先你得有个人域名，因为证书是给域名授权的。至于域名申请，万网之类的都行，然后解析指向你的服务器。</p><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install letsencrypt</span><br></pre></td></tr></table></figure><p>获取证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letsencrypt certonly</span><br></pre></td></tr></table></figure><p>根据提示完成获取，中间需要输入你的域名，最后出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- Congratulations! Your certificate and chain have been saved at</span><br><span class="line">  /etc/letsencrypt/live/&lt;你的域名&gt;/fullchain.pem. Your cert will</span><br><span class="line">  expire on 2017-09-17. To obtain a new or tweaked version of this</span><br><span class="line">  certificate <span class="keyword">in</span> the future, simply run certbot-auto again. To</span><br><span class="line">  non-interactively renew *all* of your certificates, run</span><br><span class="line">  <span class="string">"certbot-auto renew"</span></span><br><span class="line">- If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">  Donating to ISRG / Let<span class="string">'s Encrypt:   https://letsencrypt.org/donate</span></span><br><span class="line"><span class="string">  Donating to EFF:                    https://eff.org/donate-le</span></span><br></pre></td></tr></table></figure><p>  就成功了，看提示，所有的证书文件在 <code>/etc/letsencrypt/live/你的域名</code>下，里面有下面几个文件证书文件，引用别人的解释下：</p><blockquote><ul><li><code>privkey.pem</code></li></ul><p>这是私匙，对应 Nginx 的 ssl_certificate_key 选项，或者 Apache2 的 SSLCertificateKeyFile 选项。</p><ul><li><code>cert.pem</code> </li></ul><p>服务器证书，这个只有 Apache2 低于 2.4.8 版本需要，对应 SSLCertificateFile 选项。</p><ul><li><code>chain.pem</code></li></ul><p>除服务器证书之外的所有证书，对于 1.3.7 版以上的 Nginx 对应 ssl_trusted_certificate 选项，对于低于2.4.8 的 Apache2 对应 SSLCertificateChainFile 选项。</p><ul><li><code>fullchain.pem</code></li></ul><p>包括上面的服务器证书和其他证书, Nginx 对应 ssl_certificate 选项，2.4.8 版以上的 Apache2 对应 SSLCertificateFile 选项。</p><p>如果是 Nginx，需要上面的 privkey.pem（对应 ssl_certificate_key 选项）和 fullchain.pem （对应 ssl_certificate 选项），还需要一个 dhparam.pem（对应 ssl_dhparam 选项） 需自己生成：</p><p>openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048</p><p>这个文件创建稍微需要一点时间，注意看我的路径，我的是在 /etc/nginx/ssl/ 下，如果没有ssl这个目录就自己建一个，当然你换其他地方也行。</p></blockquote><p>有了这三个文件: <code>privkey.pem</code>、<code>fullchain.pem</code> 、<code>dhparam.pem</code> 就可以配置 Nginx 了。</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>编辑 <code>/etc/nginx/conf.d/xx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name binlv.top;</span><br><span class="line">    <span class="comment">#实现访问http的时候自动跳转到https</span></span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">    listen [::]:443 ssl http2;</span><br><span class="line">    server_name binlv.top;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#不输出 Nginx 版本号及其他错误信息</span></span><br><span class="line">    server_tokens off;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开启 HSTS,这么写是为了提交到 https://hstspreload.org/</span></span><br><span class="line">        add_header Strict-Transport-Security <span class="string">"max-age=31536000; includeSubDomains"</span> always;</span><br><span class="line">        <span class="comment"># 启用 XSS 保护，检查到 XSS 攻击时，停止渲染页面。</span></span><br><span class="line">    add_header X-XSS-Protection <span class="string">"1; mode=block"</span>;</span><br><span class="line">    </span><br><span class="line">        ssl_certificate /etc/letsencrypt/live/binlv.top/fullchain.pem;</span><br><span class="line">        ssl_certificate_key /etc/letsencrypt/live/binlv.top/privkey.pem;</span><br><span class="line">        ssl_dhparam /etc/nginx/ssl/dhparam.pem;</span><br><span class="line">        ssl_session_cache shared:SSL:50m;</span><br><span class="line">        ssl_session_timeout 1d;</span><br><span class="line">        ssl_session_tickets off;</span><br><span class="line">        ssl_protocols    TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers <span class="string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA'</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_stapling on;</span><br><span class="line">        ssl_stapling_verify on;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设置根目录，必须为已存在目录</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/blog;</span><br><span class="line">        index index.php index.htm index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新配置后要重启一下Nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></p><h2 id="设置证书自动更新"><a href="#设置证书自动更新" class="headerlink" title="设置证书自动更新"></a>设置证书自动更新</h2><p>Let’s Encrypt SSL 免费证书为短期证书，只有 90 天期限，提示到期前可以运行命令 <code>letsencrypt renew</code> 续期</p><p>实现定时更新证书，我们可以用linux自带的定时器crontab<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure></p><p>输入：　<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　30 2 1 * * /usr/bin/letsencrypt renew &gt;&gt; /var/<span class="built_in">log</span>/letsencrypt/le-renew.log</span><br><span class="line">　　35 2 1 * * /usr/bin/systemctl reload nginx</span><br></pre></td></tr></table></figure></p><h2 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h2><p>如果想把授权的域名取消该怎么办呢？因为免费证书如果不定期更新的话几个月就会自动过期，所以删掉本地部署时对应创建的几个文件就行啦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/letsencrypt/live/www.example.com/</span><br><span class="line">rm -rf /etc/letsencrypt/archive/www.example.com/</span><br><span class="line">rm /etc/letsencrypt/renewal/www.example.com.conf</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>很多。。。</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-centos-7" target="_blank" rel="noopener">CentOS 7配置Nginx+SSL，参考</a></li><li><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">git hooks 官方文档</a></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给闲置VPS增加点用处系列&lt;/p&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://blog.binlv.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="Linux" scheme="https://blog.binlv.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://blog.binlv.top/tags/Nginx/"/>
    
      <category term="Hexo" scheme="https://blog.binlv.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>部署Nginx服务与基本配置</title>
    <link href="https://blog.binlv.top/2017/11/27/20171127-%E9%83%A8%E7%BD%B2Nginx%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.binlv.top/2017/11/27/20171127-部署Nginx服务与基本配置/</id>
    <published>2017-11-27T03:01:06.000Z</published>
    <updated>2019-06-06T09:22:31.465Z</updated>
    
    <content type="html"><![CDATA[<p>个人站点原部署在<a href="https://github.com/baylin87/baylin87.github.io" target="_blank" rel="noopener">GitHub</a>，借助其<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub-Pages</a>功能实现免费的个人站点部署。后考虑到VPS资源闲置，加上GitHub-Pages貌似不能用<code>https</code>，就想迁移过去玩玩。</p><p>当然，实现方法有很多，我选的是用Nginx + Hexo部署。</p><a id="more"></a><h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><ul><li>操作系统：Ubuntu 16.04.2 LTS (xenial)</li><li>Nginx version : nginx/1.12.2  built with OpenSSL 1.0.2g</li></ul><h1 id="Nginx相关"><a href="#Nginx相关" class="headerlink" title="Nginx相关"></a>Nginx相关</h1><p>Nginx安装与配置。</p><h2 id="服务搭建"><a href="#服务搭建" class="headerlink" title="服务搭建"></a>服务搭建</h2><p>Ubuntu 有对应apt安装包，但需配置。</p><p>1.获取Nginx认证签名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure><p>2.将该key添加到apt中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure><p>3.添加nginx软件源</p><p>For Ubuntu replace codename with Ubuntu distribution codename, and append the following to the end of the <code>etc/apt/sources.list</code>file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ xenial nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ xenial nginx</span><br></pre></td></tr></table></figure><p>4.更新源并安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install nginx</span><br></pre></td></tr></table></figure><p>5.启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>6.默认nginx配置文件路径</p><p><code>/usr/local/nginx/conf</code>,<code>/etc/nginx</code>, or<code>/usr/local/etc/nginx</code></p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>编辑 <code>/etc/nginx/conf.d/xx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name binlv.top;</span><br><span class="line"><span class="comment">#实现访问http的时候自动跳转到https</span></span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">listen [::]:443 ssl http2;</span><br><span class="line">server_name binlv.top;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不输出 Nginx 版本号及其他错误信息</span></span><br><span class="line">server_tokens off;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置根目录，必须为已存在目录</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root &lt;--路径--&gt;;</span><br><span class="line">        index index.php index.htm index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>使nginx开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">Nginx document</a></li></ul><p>本文完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人站点原部署在&lt;a href=&quot;https://github.com/baylin87/baylin87.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;，借助其&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub-Pages&lt;/a&gt;功能实现免费的个人站点部署。后考虑到VPS资源闲置，加上GitHub-Pages貌似不能用&lt;code&gt;https&lt;/code&gt;，就想迁移过去玩玩。&lt;/p&gt;
&lt;p&gt;当然，实现方法有很多，我选的是用Nginx + Hexo部署。&lt;/p&gt;
    
    </summary>
    
      <category term="系统运维" scheme="https://blog.binlv.top/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://blog.binlv.top/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://blog.binlv.top/tags/Nginx/"/>
    
  </entry>
  
</feed>
